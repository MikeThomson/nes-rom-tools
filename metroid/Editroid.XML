<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Editroid</name>
    </assembly>
    <members>
        <member name="M:Editroid.Program.Main">
            <summary>
            The main entry point for the application.
            </summary>
        </member>
        <member name="M:Editroid.frmMain.UpdateScreensShowing(Editroid.Levels)">
            <summary>Refreshes any screen editors displaying the specified level.</summary>
            <param name="level">The level to update.</param>
        </member>
        <member name="F:Editroid.frmMain.NoEditing">
            <summary>
            Indicates that editing should be disabled, for example,
            when a blank map room (index 0xFF) is selected).
            </summary>
        </member>
        <member name="M:Editroid.frmMain.UpdateSelectionStatus">
            <summary>
            Updates all controls and menus related to screen editing, as well as the screen display.
            </summary>
        </member>
        <member name="M:Editroid.frmMain.CheckNumpad(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Handles keyboard events for numpad (map editing).
            </summary>
        </member>
        <member name="M:Editroid.frmMain.GetNumericInputValue">
            <summary>Gets the value that has been typed in by the user.</summary>
        </member>
        <member name="M:Editroid.frmMain.getIntValue(System.Windows.Forms.Keys)">
            <summary>
            Gets the value of the specified key, or -1 if the key does not represent a value.
            </summary>
        </member>
        <member name="M:Editroid.frmMain.SetCurrentScreenLevel(Editroid.Levels)">
            <summary>Sets the active screen editor to the specified level and ensures that the layout index is within range. The 
            display will be refreshed.</summary>
            <param name="screenLevel"></param>
        </member>
        <member name="M:Editroid.frmMain.RedrawScreen">
            <summary>Redraws the screen being edited and any other screen editors showing the same screen.</summary>
        </member>
        <member name="M:Editroid.frmMain.SaveMap(System.IO.FileStream,System.String)">
            <summary>
            Saves the editor map for a ROM.
            </summary>
            <param name="gameStream">The filestream the game is saved to.</param>
            <param name="filename">The filename to use if the map is to be saved to an external file.</param>
            <remarks>If an extraneous map is found (there is one in both the ROM image and an external file) it will be deleted.</remarks>
        </member>
        <member name="M:Editroid.frmMain.SaveMap(System.IO.FileStream,System.String,System.Boolean)">
            <summary>
            Saves the editor map for a ROM.
            </summary>
            <param name="gameStream">The filestream the game is saved to.</param>
            <param name="filename">The filename to use if the map is to be saved to an external file.</param>
            <param name="saveMapToRom">Whether to save to a stream or the ROM.</param>
            <remarks>If an extraneous map is found (there is one in both the ROM image and an external file) it will be deleted.</remarks>
        </member>
        <member name="M:Editroid.frmMain.NextScreen">
            <summary>Advances the screen displayed for the map slot being edited.</summary>
        </member>
        <member name="M:Editroid.frmMain.OnMapRoomDrawn(System.Object,System.EventArgs)">
            <summary>
            Called each time a map room is drawn when a map is being created to update progress.
            </summary>
        </member>
        <member name="F:Editroid.frmMain.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Editroid.frmMain.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Editroid.frmMain.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Editroid.ScreenItem">
            <summary>
            Encapsulates an item that may appear in a screen, i.e. an object, an
            enemy, or a door
            </summary>
        </member>
        <member name="M:Editroid.ScreenItem.#ctor">
            <summary>
            Creates an instance of this object that does not refer to an object.
            </summary>
        </member>
        <member name="M:Editroid.ScreenItem.#ctor(Editroid.ScreenObject)">
            <summary>
            Creates a ScreenItem object.
            </summary>
            <param name="o">The object the ScreenItem will refer to.</param>
        </member>
        <member name="M:Editroid.ScreenItem.#ctor(Editroid.ScreenDoor)">
            <summary>
            Creates a ScreenItem object.
            </summary>
            <param name="d">The object the ScreenItem will refer to.</param>
        </member>
        <member name="M:Editroid.ScreenItem.#ctor(Editroid.ScreenEnemy)">
            <summary>
            Creates a ScreenItem object.
            </summary>
            <param name="e">The object the ScreenItem will refer to.</param>
        </member>
        <member name="M:Editroid.ScreenItem.ToString">
            <summary>
            Gets a string representation of this object.
            </summary>
            <returns>Gets a string representation of this object.</returns>
        </member>
        <member name="M:Editroid.ScreenItem.Equals(System.Object)">
            <summary>
            Gets whether the specified object is considered equal to this object.
            </summary>
            <param name="obj">The object to compare for equality.</param>
            <returns>A boolean value indicating equality.</returns>
            <remarks>A comparison to a null reference will always return a false value.</remarks>
        </member>
        <member name="M:Editroid.ScreenItem.Equals(Editroid.ScreenItem)">
            <summary>
            Gets whether the specified object is considered equal to this object.
            </summary>
            <param name="s">The object to compare for equality.</param>
            <returns>A boolean value indicating equality.</returns>
            <remarks>A comparison to a null reference will always return a false value.</remarks>
        </member>
        <member name="P:Editroid.ScreenItem.SelectionType">
            <summary>
            Gets the type of object this ScreenItem refers to.
            </summary>
        </member>
        <member name="P:Editroid.ScreenItem.Item">
            <summary>
            Gets or sets the door, enemy, or screen object this object represents.
            </summary>
        </member>
        <member name="P:Editroid.ScreenItem.IsNothing">
            <summary>
            Gets a value which, when true, indicates that this object does not currently represent a value.
            This property can be set to true explicitly to clear its data, but it can not
            be set to false explicitly.
            </summary>
        </member>
        <member name="P:Editroid.ScreenItem.ThisObject">
            <summary>
            Gets or sets the enemy that this selection represents.
            </summary>
        </member>
        <member name="P:Editroid.ScreenItem.ThisEnemy">
            <summary>
            Gets or sets the enemy that this selection represents.
            </summary>
        </member>
        <member name="P:Editroid.ScreenItem.ThisDoor">
            <summary>
            Gets or sets the door that this selection represents.
            </summary>
        </member>
        <member name="P:Editroid.ScreenItem.Palette">
            <summary>
            Gets/sets the palette data if this object represents
            a screen item with palette data.
            </summary>
        </member>
        <member name="P:Editroid.ScreenItem.X">
            <summary>
            Gets/sets the X value of the currently selected enemy or object.
            </summary>
        </member>
        <member name="P:Editroid.ScreenItem.Y">
            <summary>
            Gets/sets the Y value of the currently selected enemy or object.
            </summary>
        </member>
        <member name="P:Editroid.ScreenItem.Index">
            <summary>
            Gets/sets the index value which defines the type of object or enemy this selection represents.
            </summary>
        </member>
        <member name="T:Editroid.ScreenItem.ObjectType">
            <summary>
            Represents a type of object in a game screen.
            </summary>
        </member>
        <member name="F:Editroid.ScreenItem.ObjectType.Object">
            <summary>Represents a background object.</summary>
        </member>
        <member name="F:Editroid.ScreenItem.ObjectType.Door">
            <summary>Represents an opening door.</summary>
        </member>
        <member name="F:Editroid.ScreenItem.ObjectType.Enemy">
            <summary>Represents an enemy.</summary>
        </member>
        <member name="F:Editroid.ScreenItem.ObjectType.Nothing">
            <summary>Represents nothing or an unspecified value.</summary>
        </member>
        <member name="T:Editroid.ROM.GameItem">
            <summary>
            Represents a power-up.
            </summary>
            <remarks>This class is not used by Editroid.</remarks>
        </member>
        <member name="M:Editroid.ROM.GameItem.#ctor(System.Byte[],System.Int32,Editroid.Graphic.Sprite,System.Int32)">
            <summary>
            Creates a GameItem.
            </summary>
            <param name="data">The ROM data to load this from.</param>
            <param name="offset">The location in ROM data the item data is found at.</param>
            <param name="graphic">The sprite that represents this item.</param>
            <param name="palette">The palette this item is rendered with.</param>
        </member>
        <member name="M:Editroid.ROM.GameItem.#ctor(System.Byte[],System.Int32,Editroid.Graphic.Sprite,System.Int32,System.Drawing.Point)">
            <summary>
            Creates a GameItem.
            </summary>
            <param name="data">The ROM data to load this from.</param>
            <param name="offset">The location in ROM data the item data is found at.</param>
            <param name="graphic">The sprite that represents this item.</param>
            <param name="palette">The palette this item is rendered with.</param>
            <param name="screenLocation">The location within the screen this item is found at.</param>
        </member>
        <member name="M:Editroid.ROM.GameItem.Draw(Editroid.Graphic.Blitter)">
            <summary>
            Draws this item.
            </summary>
            <param name="b"></param>
        </member>
        <member name="M:Editroid.ROM.GameItem.ToString">
            <summary>
            Gets a string representation of this object.
            </summary>
            <returns>A string representation of this object.</returns>
        </member>
        <member name="P:Editroid.ROM.GameItem.MapLocation">
            <summary>
            The location, on the map, where this item is found.
            </summary>
        </member>
        <member name="P:Editroid.ROM.GameItem.ScreenLocation">
            <summary>
            The location, within the screen, where this item is found.
            </summary>
        </member>
        <member name="T:Editroid.IpsForm">
            <summary>
            Provides an interface to create and apply IPS patches.
            </summary>
        </member>
        <member name="F:Editroid.IpsForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Editroid.IpsForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Editroid.IpsForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Editroid.IpsForm.#ctor">
            <summary>
             Creates a form.
            </summary>
        </member>
        <member name="P:Editroid.IpsForm.CurrentPatched">
            <summary>
            Gets whether the current ROM is patched.
            </summary>
        </member>
        <member name="P:Editroid.IpsForm.CurrentRom">
            <summary>
            Gets or sets the current rom. This should point to the rom loaded in the editor.
            </summary>
        </member>
        <member name="T:Editroid.Graphic.Blitter">
            <summary>
            Specialized class that performs blitting operations from a 2048x8 tile source
            to a 256x256 destination.
            </summary>
            <remarks><para>This class is meant to be used for rendering from a pattern table to an
            NES screen image. Both images must be 8-bit. The source should use the first four
            colors of the palette and the destination should use sixteen. Blitting functions
            adjust colors to use the appropriate four out of sixteen on the destination image.</para>
            <para>This class is designed to be highly optimized and does not perform
            any safety checks. Invalid or out of bounds values as well as incorrect image sizes
            and formats will produce irregular results and likely cause exceptions to be thrown.</para>
            </remarks>
        </member>
        <member name="M:Editroid.Graphic.Blitter.#ctor">
            <summary>
            Creates an instance of this class.
            </summary>
        </member>
        <member name="M:Editroid.Graphic.Blitter.Begin(System.Drawing.Bitmap,System.Drawing.Bitmap)">
            <summary>
            Prepares for write-only blitting operations.
            </summary>
            <param name="source">The source image. This should be 2048 pixels wide and eight pixels tall.</param>
            <param name="dest">The destination image. This should be 256 pixels wide and tall.</param>
        </member>
        <member name="M:Editroid.Graphic.Blitter.Begin(System.Drawing.Bitmap)">
            <summary>
            Prepares for blitting operations that do not involve a source image.
            When the blitter is opened for blitting using this method, the behavior of 
            operations that require a source image are undefined.
            Supports read/write operations.
            </summary>
            <param name="dest">The destination image. This should be 256 pixels wide and tall.</param>
        </member>
        <member name="M:Editroid.Graphic.Blitter.End">
            <summary>
            Finalizes the blitting operation
            </summary>
        </member>
        <member name="M:Editroid.Graphic.Blitter.ChangeSource(System.Drawing.Bitmap)">
            <summary>
            Selectes a different source for blitting without closing and opening the
            lock on the destination bitmap.
            </summary>
            <param name="newSource">The new source bitmap.</param>
        </member>
        <member name="M:Editroid.Graphic.Blitter.BlitTile(System.Int32,System.Int32,System.Int32,System.Byte)">
            <summary>
            Performs a bit-block-transfer from the source bitmap to 
            the destination bitmap, applying the specified palette.
            </summary>
            <param name="tile">The index of the tile to be used from the source bitmap</param>
            <param name="destX">The x-coordinate of the tile to be drawn to in the destination</param>
            <param name="destY">The y-coordinate of the tile to be drawn to in the destination</param>
            <param name="pal">The palette to use.</param>
            <remarks>The palette specified will work for the range 0 through 31 if the source
            bitmap is formatted correctly, but for NES screen rendering typically only the first four
            palettes will be used.</remarks>
        </member>
        <member name="M:Editroid.Graphic.Blitter.BlitTileTransparent(System.Int32,System.Int32,System.Int32,System.Byte)">
            <summary>
            Performs a bit-block-transfer from the source bitmap to 
            the destination bitmap, applying the specified palette.
            Any pixels with a value of zero will be rendered transparently.
            </summary>
            <param name="tile">The index of the tile to be used from the source bitmap</param>
            <param name="destX">The x-coordinate of the tile to be drawn to in the destination</param>
            <param name="destY">The y-coordinate of the tile to be drawn to in the destination</param>
            <param name="pal">The palette to use.</param>
            <remarks>The palette specified will work for the range 0 through 31 if the source
            bitmap is formatted correctly, but for NES screen rendering typically only the first four
            palettes will be used.</remarks>
        </member>
        <member name="M:Editroid.Graphic.Blitter.DrawDither(System.Int32,System.Int32,System.Byte,System.Int32)">
            <summary>
            Draws a 50% dither of the specified color.
            </summary>
            <param name="x">The x-coordinate of a 16x16 tile.</param>
            <param name="y">The y-coordinate of a 16x16 tile.</param>
            <param name="color">The index of the color to draw with</param>
            <param name="parity">A value of 0 or 1 to indicate the parity of the dither.</param>
        </member>
        <member name="M:Editroid.Graphic.Blitter.DrawDitherTile(System.Int32,System.Int32,System.Byte)">
            <summary>
            Draws a 50% dither of the specified color on an 8x8 tile.
            </summary>
            <param name="x">The x-coordinate of an 8x8 tile.</param>
            <param name="y">The y-coordinate of an 8x8 tile.</param>
            <param name="color">The index of the color to draw with</param>
        </member>
        <member name="M:Editroid.Graphic.Blitter.FillTile(System.Int32,System.Int32,System.Byte)">
            <summary>
            Fills a 16x16 tile with solid color
            </summary>
            <param name="x">The x-coordinate of the tile.</param>
            <param name="y">The y-coordinate of the tile.</param>
            <param name="color">The index of the color to fill with.</param>
        </member>
        <member name="M:Editroid.Graphic.Blitter.DrawDither(System.Int32,System.Int32,System.Byte)">
            <summary>
            Draws a 50% dither of the specified color.
            </summary>
            <param name="x">The x-coordinate of a 16x16 tile.</param>
            <param name="y">The y-coordinate of a 16x16 tile.</param>
            <param name="color">The index of the color to draw with</param>
        </member>
        <member name="M:Editroid.Graphic.Blitter.DrawRect(System.Drawing.Rectangle,System.Byte)">
            <summary>
            Draws a rectangle to the destination.
            </summary>
            <param name="rect">The bounds of the rectangle.</param>
            <param name="color">The index of the color to use.</param>
        </member>
        <member name="F:Editroid.Graphic.Blitter.OutputWidth">
            <summary>The width of the output bitmap</summary>
        </member>
        <member name="F:Editroid.Graphic.Blitter.OutputHeight">
            <summary>The height of the output bitmap</summary>
        </member>
        <member name="M:Editroid.Graphic.Blitter.BlitTileTransparent(System.Int32,System.Int32,System.Int32,System.Byte,Editroid.Graphic.Blitter.FlipFlags)">
            <summary>
            Performs a bit-block-transfer from the source bitmap to 
            the destination bitmap, applying the specified palette.
            Any pixels with a value of zero will be rendered transparently.
            </summary>
            <param name="tile">The index of the tile to be used from the source bitmap</param>
            <param name="destX">The x-coordinate of the tile to be drawn to in the destination</param>
            <param name="destY">The y-coordinate of the tile to be drawn to in the destination</param>
            <param name="pal">The palette to use.</param>
            <remarks>The palette specified will work for the range 0 through 31 if the source
            bitmap is formatted correctly, but for NES screen rendering typically only the first four
            palettes will be used.</remarks>
            <param name="flip">A FlipFlags value indicating how to flip the tile.</param>
        </member>
        <member name="M:Editroid.Graphic.Blitter.BlitTileTransparent_Pixel(System.Int32,System.Int32,System.Int32,System.Byte,Editroid.Graphic.Blitter.FlipFlags)">
            <summary>
            Performs a bit-block-transfer from the source bitmap to 
            the destination bitmap, applying the specified palette.
            Any pixels with a value of zero will be rendered transparently.
            This overload specifies a pixel location instead of a tile location.
            </summary>
            <param name="tile">The index of the tile to be used from the source bitmap</param>
            <param name="destX">The x-coordinate to draw to.</param>
            <param name="destY">The y-coordinate to draw to.</param>
            <param name="pal">The palette to use.</param>
            <remarks>The palette specified will work for the range 0 through 31 if the source
            bitmap is formatted correctly, but for NES screen rendering typically only the first four
            palettes will be used.</remarks>
            <param name="flip">A FlipFlags value indicating how to flip the tile.</param>
        </member>
        <member name="M:Editroid.Graphic.Blitter.BlitTileTransparentFlipped(System.Int32,System.Int32,System.Int32,System.Byte,Editroid.Graphic.Blitter.FlipFlags)">
            <summary>
            Performs a bit-block-transfer from the source bitmap to 
            the destination bitmap, applying the specified palette.
            Any pixels with a value of zero will be rendered transparently.
            </summary>
            <param name="tile">The index of the tile to be used from the source bitmap</param>
            <param name="destX">The x-coordinate of the tile to be drawn to in the destination</param>
            <param name="destY">The y-coordinate of the tile to be drawn to in the destination</param>
            <param name="pal">The palette to use.</param>
            <param name="flip">Indicates how the tile should be flipped</param>
            <remarks>The palette specified will work for the range 0 through 31 if the source
            bitmap is formatted correctly, but for NES screen rendering typically only the first four
            palettes will be used.</remarks>
        </member>
        <member name="T:Editroid.Graphic.Blitter.FlipFlags">
            <summary>
            Specifies flipping to be used when blitting a tile.
            </summary>
            <remarks>These values can be combined.</remarks>
        </member>
        <member name="F:Editroid.Graphic.Blitter.FlipFlags.Horizontal">
            <summary>Specifies horizontal flipping.</summary>
        </member>
        <member name="F:Editroid.Graphic.Blitter.FlipFlags.Vertical">
            <summary>Specifies vertical flipping.</summary>
        </member>
        <member name="T:Editroid.PatternTable">
            <summary>
            Provides functions to load ROM graphic data into a System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="M:Editroid.PatternTable.#ctor">
            <summary>
            Creates a new pattern table.
            </summary>
            <remarks>This overload creates a rectangular pattern table</remarks>
        </member>
        <member name="M:Editroid.PatternTable.#ctor(System.Boolean)">
            <summary>
            Creates a new pattern table.
            </summary>
            <param name="linear">If true, the patterns will be loaded in a horizontal 
            string (good for constructing images from). If false, the patterns will be
            loaded in a 16 x 16 grid (good for displaying to user).</param>
        </member>
        <member name="M:Editroid.PatternTable.#ctor(System.Boolean,System.Byte[],Editroid.PatternTableRange[])">
            <summary>
            Creates a new pattern table.
            </summary>
            <param name="linear">If true, the patterns will be loaded in a horizontal 
            string (good for constructing images from). If false, the patterns will be
            loaded in a 16 x 16 grid (good for displaying to user).</param>
            <param name="data">ROM data</param>
            <param name="tileSources">Locations of tiles</param>
        </member>
        <member name="M:Editroid.PatternTable.BeginWrite">
            <summary>
            Prepares the pattern table for loading tiles.
            </summary>
        </member>
        <member name="M:Editroid.PatternTable.EndWrite">
            <summary>
            Finalizing writing operations to the pattern table.
            </summary>
        </member>
        <member name="M:Editroid.PatternTable.LoadTiles(System.Byte[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Loads a strip of tiles from raw ROM data into this pattern table.
            </summary>
            <param name="data">The ROM image to load tiles from</param>
            <param name="offset">The location of the graphic data</param>
            <param name="tileOffset">Which tile to begin loading at</param>
            <param name="tileCount">The number of tiles to load</param>
            <remarks>A linear strip of tiles is loaded starting at the specified tile index. If the tiles
            reach the end of a row in a square pattern table they wrap to the next line. If the end of the pattern table is reached
            or the end of ROM data is reached, copying will stop without error.
            The function BeginWrite must be called at some point before this function
            is called. The function EndWrite must be called to finalize the process. Otherwise
            the loaded tiles will not be reflected in this pattern table.</remarks>
        </member>
        <member name="M:Editroid.PatternTable.LoadTiles(System.Byte[],System.Int32,Editroid.PatternTableRange)">
            <summary>
            Loads a strip of tiles from raw ROM data into this pattern table.
            </summary>
            <param name="data">The ROM image to load tiles from</param>
            <param name="tileOffset">Where to load the tiles into the pattern table</param>
            <param name="tiles">A PatternTableRange that specifies a region of data
            to load from the ROM</param>
            <remarks>The function BeginWrite must be called at some point before this function
            is called. The function EndWrite must be called to finalize the process. Otherwise
            the loaded tiles will not be reflected in this pattern table.</remarks>
        </member>
        <member name="M:Editroid.PatternTable.LoadTiles(System.Byte[],Editroid.PatternTableRange[])">
            <summary>
            Uses an array of PatternTableRange objects to fill a pattern table.
            </summary>
            <param name="data">ROM image to load tiles from</param>
            <param name="source">An array of PatternTableRange objects that provides
            the source to load data from</param>
            <remarks>The function BeginWrite must be called at some point before this function
            is called. The function EndWrite must be called to finalize the process. Otherwise
            the loaded tiles will not be reflected in this pattern table.</remarks>
        </member>
        <member name="P:Editroid.PatternTable.Patterns">
            <summary>
            Returns an 8 bit-per-pixel bitmap containing all loaded tiles.
            </summary>
        </member>
        <member name="P:Editroid.PatternTable.Palette">
            <summary>
            Gets or sets the palette applied to the tiles.
            </summary>
            <remarks>Changes to the palette will be reflected in all references to
            this PatternTable's Patterns. If you need to use multiple palettes simultaneously
            you should, for each differently paletted version, set the desired palette,
            clone the pattern bitmap and retain the clone(s) as the paletted bitmap(s).</remarks>
        </member>
        <member name="T:Editroid.PatternTableRange">
            <summary>
            Defines a range of ROM memory to be loaded into a Pattern Table.
            </summary>
            <remarks>This class is primarily intended to encapsulate the pattern table
            data ranges for Metroid using the public fields "Brinstar", "Norfiar", etc., but
            it can be used to specify data ranges and load tiles for any NES graphic data.</remarks>
        </member>
        <member name="M:Editroid.PatternTableRange.#ctor(System.Int32,System.Int32)">
            <summary>
            Instantiates this object.
            </summary>
            <param name="romOffset">The offset of the graphic data within the ROM.</param>
            <param name="tileCount">The number of tiles included in this range.</param>
        </member>
        <member name="F:Editroid.PatternTableRange.Brinstar">
            <summary>
            Gets the ROM offsets and tile counts that should be used to construct a 
            256-tile pattern table for this level.
            </summary>
        </member>
        <member name="M:Editroid.PatternTableRange.GetRanges(Editroid.Levels)">
            <summary>
            Gets the pattern table offsets for the specified level.
            </summary>
            <param name="level">A level.</param>
            <returns>An array of PatternTableRange objects.</returns>
        </member>
        <member name="M:Editroid.PatternTableRange.GetSpriteRanges(Editroid.Levels)">
            <summary>
            Gets the pattern table offsets for the specified level.
            </summary>
            <param name="level">A level.</param>
            <returns>An array of PatternTableRange objects.</returns>
        </member>
        <member name="F:Editroid.PatternTableRange.BrinstarSprites">
            <summary>
            Gets the ROM offsets and tile counts that should be used to construct a 
            256-tile pattern table for this level.
            </summary>
        </member>
        <member name="F:Editroid.PatternTableRange.Norfair">
            <summary>
            Gets the ROM offsets and tile counts that should be used to construct a 
            256-tile pattern table for this level.
            </summary>
        </member>
        <member name="F:Editroid.PatternTableRange.NorfairSprites">
            <summary>
            Gets the ROM offsets and tile counts that should be used to construct a 
            256-tile pattern table for this level.
            </summary>
        </member>
        <member name="F:Editroid.PatternTableRange.Tourain">
            <summary>
            Gets the ROM offsets and tile counts that should be used to construct a 
            256-tile pattern table for this level.
            </summary>
        </member>
        <member name="F:Editroid.PatternTableRange.TourainSprites">
            <summary>
            Gets the ROM offsets and tile counts that should be used to construct a 
            256-tile pattern table for this level.
            </summary>
        </member>
        <member name="F:Editroid.PatternTableRange.Kraid">
            <summary>
            Gets the ROM offsets and tile counts that should be used to construct a 
            256-tile pattern table for this level.
            </summary>
        </member>
        <member name="F:Editroid.PatternTableRange.KraidSprites">
            <summary>
            Gets the ROM offsets and tile counts that should be used to construct a 
            256-tile pattern table for this level.
            </summary>
        </member>
        <member name="F:Editroid.PatternTableRange.Ridley">
            <summary>
            Gets the ROM offsets and tile counts that should be used to construct a 
            256-tile pattern table for this level.
            </summary>
        </member>
        <member name="F:Editroid.PatternTableRange.RidleySprites">
            <summary>
            Gets the ROM offsets and tile counts that should be used to construct a 
            256-tile pattern table for this level.
            </summary>
        </member>
        <member name="M:Editroid.PatternTableRange.GetBackgroundTableRanges(Editroid.Levels)">
            <summary>
            Gets the PatternTableRanges that represent a complete pattern table
            for the specified level.
            </summary>
            <param name="level">a Metroid level</param>
            <returns>A PatternTableRanges that represent a complete pattern table.</returns>
        </member>
        <member name="M:Editroid.PatternTableRange.GetSpriteTableRange(Editroid.Levels)">
            <summary>
            Gets the PatternTableRanges for a specific level.
            </summary>
            <param name="level"></param>
            <returns></returns>
        </member>
        <member name="P:Editroid.PatternTableRange.RomOffset">
            <summary>
            Gets the offset where graphic data begins.
            </summary>
        </member>
        <member name="P:Editroid.PatternTableRange.TileCount">
            <summary>
            Gets the number of tiles included in the data range.
            </summary>
        </member>
        <member name="T:Editroid.frmPalette">
            <summary>
            Allows editing of level and sprite palettes in a Metroid ROM.
            </summary>
        </member>
        <member name="F:Editroid.frmPalette.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Editroid.frmPalette.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Editroid.frmPalette.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Editroid.frmPalette.#ctor">
            <summary>
            Instantiates this component.
            </summary>
        </member>
        <member name="P:Editroid.frmPalette.Data">
            <summary>
            Gets/sets the ROM image data to edit.
            </summary>
        </member>
        <member name="T:Editroid.ROM.PasswordData">
            <summary>
            Examines and modifies which items and doors different parts of
            the password refer to.
            </summary>
        </member>
        <member name="F:Editroid.ROM.PasswordData.DataOffset">
            <summary>Data offset of the first piece of password data.</summary>
        </member>
        <member name="F:Editroid.ROM.PasswordData.DataCount">
            <summary>Number of password data items.</summary>
        </member>
        <member name="M:Editroid.ROM.PasswordData.#ctor(System.Byte[])">
            <summary>
            Creates a PasswordData object.
            </summary>
            <param name="data">ROM data to create this object from.</param>
        </member>
        <member name="M:Editroid.ROM.PasswordData.GetDatum(System.Int32)">
            <summary>
            Gets a piece of password data.
            </summary>
            <param name="index">Index of data.</param>
            <returns>a piece of password data</returns>
        </member>
        <member name="T:Editroid.ROM.PasswordDatum">
            <summary>
            Exposes the function of a password bit.
            </summary>
        </member>
        <member name="F:Editroid.ROM.PasswordDatum.offset">
            <summary>
            The offset of this piece of data.
            </summary>
        </member>
        <member name="F:Editroid.ROM.PasswordDatum.data">
            <summary>
            The ROM data being examined.
            </summary>
        </member>
        <member name="M:Editroid.ROM.PasswordDatum.#ctor(System.Byte[],System.Int32)">
            <summary>
            Instantiates this struct.
            </summary>
            <param name="data">ROM data to examine.</param>
            <param name="offset">Offset within ROM data to examine.</param>
        </member>
        <member name="M:Editroid.ROM.PasswordDatum.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Editroid.ROM.PasswordDatum.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Editroid.ROM.PasswordDatum.ToString">
            <summary>
            Gets a string representation of this object.
            </summary>
            <returns>A string representation of this object.</returns>
        </member>
        <member name="P:Editroid.ROM.PasswordDatum.MapY">
            <summary>
            Gets/sets the Y-coordinate that this datum refers to.
            </summary>
        </member>
        <member name="P:Editroid.ROM.PasswordDatum.MapX">
            <summary>
            Gets/sets the X-coordinate that this datum refers to.
            </summary>
        </member>
        <member name="P:Editroid.ROM.PasswordDatum.Item">
            <summary>
            Gets/sets the item type that this datum refers to.
            </summary>
        </member>
        <member name="T:Editroid.ItemImages">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Editroid.ItemImages.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Editroid.ItemImages.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:Editroid.Struct">
            <summary>
            Represents the objects that rooms are composed of.
            </summary>
            <remarks>This class caches ROM data. Use the appropriate methods to make changes to the ROM data that will be
            reflected in this object. Read documentation for specifics.</remarks>
        </member>
        <member name="M:Editroid.Struct.#ctor(System.Byte[],System.Int32)">
            <summary>
            Loads Struct data from a ROM image
            </summary>
            <param name="data">The ROM</param>
            <param name="offset">The location of the struct in the ROM</param>
        </member>
        <member name="M:Editroid.Struct.Refresh">
            <summary>
            Reloads the struct that this object points to.
            </summary>
            <remarks>This function should be called whenever this object needs to reflect
            changes that were made to raw ROM data. This function does not need to be
            called if changes are made through this object.</remarks>
        </member>
        <member name="M:Editroid.Struct.WriteToRom">
            <summary>
            Writes this structs data back to the ROM data. Call this method after changing
            this object's data if the changes should be reflected in raw ROM data.
            </summary>
        </member>
        <member name="M:Editroid.Struct.RedefineCombos(System.Byte[][])">
            <summary>
            Allows new data to be specified for this combo. This is
            necessary to change the number or length of rows, but
            not the position of rows or the tiles they contain. A
            redefined combo must be such that the number of rows
            plus the total number of tiles equals that of the original.
            </summary>
            <param name="newComboData">New combo data.</param>
        </member>
        <member name="F:Editroid.Struct.EmptyTile">
            <summary>
            Represents a lack of a tile. This tile should not be
            rendered and will exhibit no physics.
            </summary>
        </member>
        <member name="P:Editroid.Struct.Combos">
            <summary>
            Gets an array of combos that define this struct.
            </summary>
        </member>
        <member name="P:Editroid.Struct.Width">
            <summary>
            Gets the width of this struct
            </summary>
        </member>
        <member name="P:Editroid.Struct.Height">
            <summary>
            Gets the height of this struct
            </summary>
        </member>
        <member name="P:Editroid.Struct.Offset">
            <summary>
            Gets the offset of this combos raw data in the ROM.
            </summary>
        </member>
        <member name="T:Editroid.Graphic.Sprite">
            <summary>
            Contains a definition of an image composed of graphic tiles
            </summary>
        </member>
        <member name="M:Editroid.Graphic.Sprite.#ctor(System.Byte[])">
            <summary>
            Creates a sprite from the specified sprite data
            </summary>
            <param name="spriteData">Data used for sprite</param>
        </member>
        <member name="M:Editroid.Graphic.Sprite.#ctor(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Creates a sprite from the specified sprite data
            </summary>
            <param name="spriteData">Data used for sprite</param>
            <param name="width">Width of sprite in tiles (eight pixel units)</param>
            <param name="height">Height of sprite in tiles (eight pixel units)</param>
        </member>
        <member name="M:Editroid.Graphic.Sprite.FromArray(System.Byte[][],System.Drawing.Size[])">
            <summary>
            Creates an array of sprites from an array of sprite data arrays.
            </summary>
            <param name="data">Array of sprite data arrays.</param>
            <param name="sizes">Sprite sizes</param>
            <returns>An array of sprites.</returns>
        </member>
        <member name="M:Editroid.Graphic.Sprite.Draw_Unused(Editroid.Graphic.Blitter,System.Int32,System.Int32,System.Byte)">
            <summary>
            Draws a sprite using a blitter.
            </summary>
            <param name="b">The blitter to use to render the sprite.</param>
            <param name="X">The X-coordinate of the sprite.</param>
            <param name="Y">The Y-coordinate of the sprite.</param>
            <param name="pal">The number of the palette to render the sprite with.</param>
            <remarks>The blitter must be open for rendering before this function
            can be called.</remarks>
        </member>
        <member name="M:Editroid.Graphic.Sprite.Draw(Editroid.Graphic.Blitter,System.Int32,System.Int32,System.Byte)">
            <summary>
            Draws a sprite using a blitter.
            </summary>
            <param name="b">The blitter to use to render the sprite.</param>
            <param name="X">The X-coordinate of the sprite.</param>
            <param name="Y">The Y-coordinate of the sprite.</param>
            <param name="pal">The number of the palette to render the sprite with.</param>
            <remarks>The blitter must be open for rendering before this function
            can be called.</remarks>
        </member>
        <member name="M:Editroid.Graphic.Sprite.Measure">
            <summary>
            Measures a sprite.
            </summary>
            <returns>A rectangle that represents the bounds of a sprite
            relative to its zero coordinate.</returns>
        </member>
        <member name="F:Editroid.Graphic.Sprite.LeftDoor">
            <summary>
            The sprite used for an opening door on the left edge of a screen.
            </summary>
        </member>
        <member name="F:Editroid.Graphic.Sprite.RightDoor">
            <summary>
            The sprite used for an opening door on the right edge of a screen.
            </summary>
        </member>
        <member name="F:Editroid.Graphic.Sprite.BrinstarSprites">
            <summary>
            Enemy sprites used in Brinstar.
            </summary>
        </member>
        <member name="F:Editroid.Graphic.Sprite.NorfairSprites">
            <summary>
            Enemy sprites used in Norfair.
            </summary>
        </member>
        <member name="F:Editroid.Graphic.Sprite.KraidSprites">
            <summary>
            Enemy sprites used in Kraid's Hideout.
            </summary>
        </member>
        <member name="F:Editroid.Graphic.Sprite.RidleySprites">
            <summary>
            Enemy sprites used in Ridley's Hideout.
            </summary>
        </member>
        <member name="F:Editroid.Graphic.Sprite.TourainSprites">
            <summary>
            Enemy sprites used in Tourain.
            </summary>
        </member>
        <member name="M:Editroid.Graphic.Sprite.GetSprites(Editroid.Levels)">
            <summary>
            Gets sprite definitions based on the specified level.
            </summary>
            <param name="level">The level to get sprite definitions for.</param>
            <returns>An array of sprites.</returns>
        </member>
        <member name="P:Editroid.Graphic.Sprite.Width">
            <summary>
            Gets/sets the width of this sprite in tiles (eight pixel units)
            </summary>
        </member>
        <member name="P:Editroid.Graphic.Sprite.Height">
            <summary>
            Gets/sets the height of this sprite in tiles (eight pixel units)
            </summary>
        </member>
        <member name="P:Editroid.Graphic.Sprite.IsBlank">
            <summary>
            Returns true if this tile has no data.
            </summary>
        </member>
        <member name="T:Editroid.Graphic.SpriteMacros">
            <summary>
            Enumerates special values that can be used in sprite data
            </summary>
        </member>
        <member name="F:Editroid.Graphic.SpriteMacros.NextRow">
            <summary>Tiles drawing will move down one row and back to origional x.
            This undoes any Move macros.</summary>
        </member>
        <member name="F:Editroid.Graphic.SpriteMacros.FlipX">
            <summary>Next tile will be flipped horizontally.</summary>
        </member>
        <member name="F:Editroid.Graphic.SpriteMacros.FlipY">
            <summary>Next tile will be flipped vertically.</summary>
        </member>
        <member name="F:Editroid.Graphic.SpriteMacros.MoveR4">
            <summary>Tiles will be drawn four pixels to the right.</summary>
        </member>
        <member name="F:Editroid.Graphic.SpriteMacros.MoveL4">
            <summary>Tiles will be drawn four pixels to the left.</summary>
        </member>
        <member name="F:Editroid.Graphic.SpriteMacros.MoveU4">
            <summary>Tiles will be drawn four pixels up.</summary>
        </member>
        <member name="F:Editroid.Graphic.SpriteMacros.MoveD4">
            <summary>Tiles will be drawn four pixels down.</summary>
        </member>
        <member name="F:Editroid.Graphic.SpriteMacros.NextPal">
            <summary>Tile will be rendered with next palette.</summary>
        </member>
        <member name="M:Editroid.ScreenControl.#ctor">
            <summary>Creates an instance of this control.</summary>
        </member>
        <member name="F:Editroid.ScreenControl.ScreenBitmap">
            <summary>The screen image is drawn to this bitmap.</summary>
        </member>
        <member name="F:Editroid.ScreenControl.screenRenderer">
            <summary>Takes screen data and renders a screen image using a Graphic.Blitter object.</summary>
        </member>
        <member name="F:Editroid.ScreenControl.screenBlitter">
            <summary>Performs actual drawing for screen rendering.</summary>
        </member>
        <member name="F:Editroid.ScreenControl.selectionHighlight">
            <summary>The highlighting effect used for selected object.</summary>
        </member>
        <member name="F:Editroid.ScreenControl._Rom">
            <summary>The ROM being edited.</summary>
        </member>
        <member name="F:Editroid.ScreenControl.SpriteData">
            <summary>Level specific data for sprites (used for rendering enemies).</summary>
        </member>
        <member name="F:Editroid.ScreenControl.LevelData">
            <summary>General level data for displayed screen.</summary>
        </member>
        <member name="F:Editroid.ScreenControl.ScreenData">
            <summary>General screen data for displayed screen.</summary>
        </member>
        <member name="F:Editroid.ScreenControl._SelectedItem">
            <summary>The currently selected object or enemy.</summary>
        </member>
        <member name="F:Editroid.ScreenControl.mapLocation">
            <summary>Specifies the map location of the current screen, used for referencing map data (e.x. level specified on map) and global data (e.x. item data).</summary>
        </member>
        <member name="M:Editroid.ScreenControl.EnemyAtPixel(System.Int32,System.Int32)">
            <summary>
            Gets the enemy at the specified location.
            </summary>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
            <returns>The enemy at the specified location, or 
            ScreenEnemy.Nothing if no enemy is found.</returns>
        </member>
        <member name="M:Editroid.ScreenControl.EnemyAt(System.Int32,System.Int32)">
            <summary>
            Gets the enemy found in the specified tile.
            </summary>
            <param name="x">X coordiante.</param>
            <param name="y">Y coordinate.</param>
            <returns></returns>
        </member>
        <member name="M:Editroid.ScreenControl.ObjectAtPixel(System.Int32,System.Int32)">
            <summary>
            Gets which object is at a specified pixel coorinate.
            </summary>
            <param name="x">X-coordinate.</param>
            <param name="y">Y-coordinate.</param>
            <returns>The object at the specified coordinates.</returns>
        </member>
        <member name="M:Editroid.ScreenControl.ObjectAt(System.Int32,System.Int32)">
            <summary>
            Gets which object is at a specified tile coordinate
            </summary>
            <param name="tileX">The x-coordinate.</param>
            <param name="tileY">The y-coordinate</param>
            <returns>The object at a specified coordinate.</returns>
        </member>
        <member name="M:Editroid.ScreenControl.SelectedObjectIndex">
            <summary>
            Gets the index of the selected object
            </summary>
            <returns>The index of an object</returns>
        </member>
        <member name="M:Editroid.ScreenControl.UpdateSelectionStatus">
            <summary>
            Updates controls to properly reflect the state of the selection.
            </summary>
        </member>
        <member name="M:Editroid.ScreenControl.Deselect">
            <summary>
            Deselects the selected item.
            </summary>
        </member>
        <member name="M:Editroid.ScreenControl.Screen_MouseDown(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Overrides base member.
            </summary>
            <param name="sender">Sender parameter.</param>
            <param name="e">e paremeter.</param>
        </member>
        <member name="M:Editroid.ScreenControl.OnSelectionDragged">
            <summary>
            Raises the SelectionDragged event.
            </summary>
        </member>
        <member name="M:Editroid.ScreenControl.SelectNext">
            <summary>
            Selects the struct after the currently selected struct
            </summary>
        </member>
        <member name="M:Editroid.ScreenControl.SelectPrevious">
            <summary>Selects the struct before the currently selected struct.</summary>
        </member>
        <member name="M:Editroid.ScreenControl.SetPalette(System.Byte,System.Int32)">
            <summary>
            Sets the palette of an object.
            </summary>
            <param name="palette">The palette to apply to the object</param>
            <param name="obj">The index of the object to modify</param>
        </member>
        <member name="M:Editroid.ScreenControl.SetPalette(System.Byte)">
            <summary>
            Sets the palette of the selected object if that object is not
            an enemy or door.
            </summary>
            <param name="palette">The palette to apply to the object</param>
        </member>
        <member name="M:Editroid.ScreenControl.NextPalette(System.Int32)">
            <summary>
            Changes the palette of the specified object.
            </summary>
            <param name="obj">Index of the object to modify</param>
        </member>
        <member name="M:Editroid.ScreenControl.NextPalette">
            <summary>
            Changes the palette of the selected object
            </summary>
        </member>
        <member name="M:Editroid.ScreenControl.SeekSelectedObjectType(System.Int32)">
            <summary>
            Seeks through the possible types for the selected item.
            </summary>
            <param name="count">The number of structs to seek past if the selected item is an object, or a positive number or negative number to indicate which way to seek through the enemies.</param>
        </member>
        <member name="M:Editroid.ScreenControl.BringToFront(Editroid.ScreenObject)">
            <summary>
            Private implementation of BringObjToFront
            </summary>
            <param name="obj">Object to modify</param>
        </member>
        <member name="M:Editroid.ScreenControl.BringObjToFront(System.Int32)">
            <summary>
            Brings a screen object in front of all other objects in the screen.
            </summary>
            <param name="obj">The object to bring to the front</param>
        </member>
        <member name="M:Editroid.ScreenControl.BringObjToFront">
            <summary>
            Brings a screen object in front of all other objects in the screen.
            </summary>
        </member>
        <member name="M:Editroid.ScreenControl.SendObjToBack(System.Int32)">
            <summary>
            Sends a screen object behind all other objects in the screen.
            </summary>
            <param name="obj">The object to send to the back</param>
        </member>
        <member name="M:Editroid.ScreenControl.SendObjToBack">
            <summary>
            Sends a screen object behind all other objects in the screen.
            </summary>
        </member>
        <member name="M:Editroid.ScreenControl.SendToBack(Editroid.ScreenObject)">
            <summary>
            Private implementation of Object.SendToBack
            </summary>
            <param name="obj">Object to send</param>
        </member>
        <member name="M:Editroid.ScreenControl.ToggleSelectionType">
            <summary>
            Toggles selection between enemies and objects
            </summary>
        </member>
        <member name="M:Editroid.ScreenControl.NextEnemySlot">
            <summary>Increases the selected enemy's slot.</summary>
        </member>
        <member name="M:Editroid.ScreenControl.RemoveSelectedItem">
            <summary>
            Deletes the selected object from the screen data and updates the ROM image to free the memory the object used.
            </summary>
        </member>
        <member name="M:Editroid.ScreenControl.ToggleRespawn">
            <summary>
            Toggles whether the selected enemy will respawn.
            </summary>
        </member>
        <member name="M:Editroid.ScreenControl.MoveObject(System.Int32,System.Int32)">
            <summary>
            Offsets the position of an object.
            </summary>
            <param name="distX">The distance to move the object.</param>
            <param name="distY">The distance to move the object.</param>
            <remarks>If the object is moved out of bounds, it will automatically
            be moved to the nearest border.</remarks>
        </member>
        <member name="M:Editroid.ScreenControl.AddEnemy">
            <summary>Expands screen data and adds an enemy to the screen.</summary>
            <returns>A ScreenEnemy object that represents the newly added enemy.</returns>
        </member>
        <member name="M:Editroid.ScreenControl.GetNewSpriteSlot">
            <summary>Gets the index of the first available sprite slot</summary>
        </member>
        <member name="M:Editroid.ScreenControl.ExpandEnemyData(System.Int32,System.Int32)">
            <summary>
            Expands current screens data for enemies/doors. If necessary,
            an enemy data section will be added.
            </summary>
            <param name="offset">The offset to expand at.</param>
            <param name="bytes">The number of free bytes needed.</param>
            <returns>The offset of the free space.</returns>
        </member>
        <member name="M:Editroid.ScreenControl.SetLeftDoor(Editroid.DoorType)">
            <summary>Specifies the door type for the left door.</summary>
            <param name="type"></param>
            <returns>The data object that was modified.</returns>
        </member>
        <member name="M:Editroid.ScreenControl.DeleteLeftDoor">
            <summary>Removes the left door.</summary>
        </member>
        <member name="M:Editroid.ScreenControl.SetRightDoor(Editroid.DoorType)">
            <summary>Specifies the door type for the right door.</summary>
            <param name="type"></param>
            <returns>The data object that was modified.</returns>
        </member>
        <member name="M:Editroid.ScreenControl.DeleteRightDoor">
            <summary>Removes the right door.</summary>
        </member>
        <member name="M:Editroid.ScreenControl.AddDoorToCurrentScreen(Editroid.DoorType,Editroid.DoorSide)">
            <summary>
            Expands level room data and adds a door to CurrentScreen
            </summary>
        </member>
        <member name="M:Editroid.ScreenControl.FindItems">
            <summary>Finds any items at this map location and stores the data. This is used for rendering only.</summary>
        </member>
        <member name="M:Editroid.ScreenControl.ApplyHighlightFilter(System.Drawing.Imaging.ColorPalette)">
            <summary>Applies highlight effect to highlight palettes (colors 0x10-0x1F and 0x30-0x3F, which should mirror 0x00-0x0F and 0x20-0x2F prior to calling this function).</summary>
        </member>
        <member name="M:Editroid.ScreenControl.ApplyHighlightFilterToRange(System.Drawing.Imaging.ColorPalette,System.Int32,System.Int32)">
            <summary>Applies highlight effect to the specified range within a palette.</summary>
        </member>
        <member name="M:Editroid.ScreenControl.ShowScreen">
            <summary>Refreshes the display.</summary>
        </member>
        <member name="M:Editroid.ScreenControl.ShowScreen(System.Boolean)">
            <summary>Refreshes the display.</summary>
            <param name="physics">If true, the physics of the screen will be shown.</param>
        </member>
        <member name="M:Editroid.ScreenControl.LoadData">
            <summary>Gets data (Level, Screen) needed to render the screen</summary>
        </member>
        <member name="M:Editroid.ScreenControl.lblSlot_Click(System.Object,System.EventArgs)">
            <summary>Handles UI event.</summary>
        </member>
        <member name="M:Editroid.ScreenControl.GetObjectIndex(Editroid.ScreenObject)">
            <summary>
            Gets the index of a specified object. This object must be contained in the
            screen being displayed.
            </summary>
            <param name="obj">The object to obtain the index of</param>
            <returns>The index of an object</returns>
        </member>
        <member name="M:Editroid.ScreenControl.GetItemIndex(Editroid.ScreenItem)">
            <summary>
            Gets the index of the specified door, enemy, or object.
            </summary>
            <param name="item">Object to get index of.</param>
            <returns>An integer index.</returns>
        </member>
        <member name="M:Editroid.ScreenControl.RefreshData">
            <summary>
            Refreshes the data for the currently displayed screen and then redraws the screen.
            </summary>
        </member>
        <member name="M:Editroid.ScreenControl.RefreshData(System.Boolean,System.Boolean)">
            <summary>
            Refreshes the data for the currently displayed screen.
            </summary>
            <param name="showScreen">If true, the screen image will be refreshed.</param>
            <param name="defaultSelection">If true, a default selection will be made.</param>
        </member>
        <member name="M:Editroid.ScreenControl.MakeDefaultSelection">
            <summary>Makes a default selection, for instance, when a new screen is shown.</summary>
        </member>
        <member name="F:Editroid.ScreenControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Editroid.ScreenControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Editroid.ScreenControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:Editroid.ScreenControl.LevelIndex">
            <summary>Specifies which level data will be loaded for or is currently loaded for.</summary>
        </member>
        <member name="P:Editroid.ScreenControl.ScreenIndex">
            <summary>The index of the screen to display.</summary>
        </member>
        <member name="P:Editroid.ScreenControl.MapLocation">
            <summary>
            Gets or sets the map location that the current screen represents. This is
            used to reference global data that might be relevant to this screen.
            </summary>
        </member>
        <member name="P:Editroid.ScreenControl.Rom">
            <summary>
            Gets/sets which ROM image to load data from
            </summary>
        </member>
        <member name="P:Editroid.ScreenControl.AltPalette">
            <summary>
            Whether or not to use this level's alternate palette
            </summary>
        </member>
        <member name="P:Editroid.ScreenControl.SelectionHighlight">
            <summary>Gets/sets the highlighting effect used for the selected object.</summary>
        </member>
        <member name="P:Editroid.ScreenControl.CurrentScreen">
            <summary>Gets the data for the screen being displayed.</summary>
        </member>
        <member name="P:Editroid.ScreenControl.SelectedItem">
            <summary>Gets which item has been selected within this control.</summary>
        </member>
        <member name="E:Editroid.ScreenControl.SelectedObjectChanged">
            <summary>Raised when an object is selected.</summary>
        </member>
        <member name="P:Editroid.ScreenControl.SelectedEnemyIndex">
            <summary>
            Gets or sets the index which specifies which enemy to highlight
            on the screen. This is for display purposes only.
            </summary>
        </member>
        <member name="E:Editroid.ScreenControl.SelectionDragged">
            <summary>Occurs when the selected object is dragged.</summary>
        </member>
        <member name="P:Editroid.ScreenControl.EnemyMode">
            <summary>
            Gets/sets whether the selection display will be set up for
            enemies.
            </summary>
        </member>
        <member name="T:Editroid.ScreenControl.HighlightEffect">
            <summary>Enumerates possible highlight effects for objects in a ScreenControl.</summary>
        </member>
        <member name="F:Editroid.ScreenControl.HighlightEffect.Invert">
            <summary>The object is inverted.</summary>
        </member>
        <member name="F:Editroid.ScreenControl.HighlightEffect.Lighten">
            <summary>The object is displayed using lighter colors</summary>
        </member>
        <member name="F:Editroid.ScreenControl.HighlightEffect.LightenInvertBack">
            <summary>The object is displayed using lighter colors on an inverted background</summary>
        </member>
        <member name="F:Editroid.ScreenControl.HighlightEffect.InvertBack">
            <summary>The object is displayed on an inverted background</summary>
        </member>
        <member name="T:Editroid.ScreenObject">
            <summary>
            Represents an object within a room (an instance of a struct).
            </summary>
        </member>
        <member name="M:Editroid.ScreenObject.#ctor(System.Byte[],System.Int32)">
            <summary>
            Creates an object from raw ROM data
            </summary>
            <param name="data">ROM data</param>
            <param name="offset">location of object data in ROM</param>
        </member>
        <member name="M:Editroid.ScreenObject.GetHashCode">
            <summary>
            Creates a hashcode based on this object's offset. The data source is not taken into consideration.
            </summary>
            <returns>Hashcode of this object</returns>
        </member>
        <member name="M:Editroid.ScreenObject.CopyData(Editroid.ScreenObject)">
            <summary>
            Copies the data from this screen object to another screen object.
            </summary>
            <param name="dest">Screen object to copy data to.</param>
        </member>
        <member name="M:Editroid.ScreenObject.CopyData">
            <summary>
            Copies the data from this screen object to a four-byte integer.
            </summary>
            <returns>An Int32 containing binary data from this object.</returns>
        </member>
        <member name="M:Editroid.ScreenObject.CopyData(System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Copies the data from this screen object to the pass-by-reference parameters.
            </summary>
            <param name="x">Variable to store the X value in.</param>
            <param name="y">Variable to store the Y value in.</param>
            <param name="pal">Variable to store the palette value in.</param>
            <param name="structIndex">Variable to store the Index value in.</param>
        </member>
        <member name="M:Editroid.ScreenObject.SetData(System.Int32)">
            <summary>
            Loads binary data from a 4-byte integer that represents a screen object.
            </summary>
            <param name="Data">The integer containing binary data.</param>
        </member>
        <member name="M:Editroid.ScreenObject.SetData(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets all of the data of this screen object.
            </summary>
            <param name="x">X value.</param>
            <param name="y">Y value.</param>
            <param name="pal">Palette data.</param>
            <param name="structIndex">Index.</param>
        </member>
        <member name="M:Editroid.ScreenObject.Equals(System.Object)">
            <summary>
            Determines whether the two objects reference the same ROM memory and therefore
            the same game object.
            </summary>
            <param name="obj">The object to compare to.</param>
            <returns>False if obj is not a ScreenObject. Otherwise, returns whether or not
            the objects refer to the same game object.</returns>
        </member>
        <member name="M:Editroid.ScreenObject.Equals(Editroid.ScreenObject)">
            <summary>
            Determines whether the two objects reference the same ROM memory and therefore
            the same game object.
            </summary>
            <param name="obj">The object to compare to.</param>
            <returns>Returns whether or not
            the objects refer to the same game object.</returns>
        </member>
        <member name="F:Editroid.ScreenObject.Nothing">
            <summary>
            Gets a ScreenObject that refers to nothing.
            </summary>
        </member>
        <member name="M:Editroid.ScreenObject.ToString">
            <summary>
            Gets a string representation of this object.
            </summary>
            <returns>A string representation of this object.</returns>
        </member>
        <member name="P:Editroid.ScreenObject.Offset">
            <summary>Gets the offset of the data for this object.</summary>
        </member>
        <member name="P:Editroid.ScreenObject.X">
            <summary>
            The X-Coordinate of this object. Valid range is 0 to 15.
            </summary>
        </member>
        <member name="P:Editroid.ScreenObject.Y">
            <summary>
            Gets/sets the Y-coordinate of this object on the screen. Valid range is 0 to 15.
            </summary>
        </member>
        <member name="P:Editroid.ScreenObject.Index">
            <summary>
            Gets the index of the struct definition this object uses
            </summary>
        </member>
        <member name="P:Editroid.ScreenObject.PalData">
            <summary>
            Gets the raw palette data for this object
            </summary>
        </member>
        <member name="P:Editroid.ScreenObject.IsNothing">
            <summary>
            Returns true if this ScreenObject does not refer to a ROM or if it does
            not refer to a particular game object in the ROM.
            </summary>
        </member>
        <member name="P:Editroid.ScreenObject.PreviousItem">
            <summary>
            Gets the item that preceeds this item.
            </summary>							  
            <remarks>This function simply performs a seek operation on the
            ROM data and returns the item an an earlier offset. Since screen
            items are not aware of eachother, no check
            is made to ensure that the data is valid or in range.</remarks>
        </member>
        <member name="T:Editroid.ScreenDoor">
            <summary>
            Represents a door within a screen
            </summary>
        </member>
        <member name="F:Editroid.ScreenDoor.Nothing">
            <summary>
            A ScreenDoor object with no value.
            </summary>
        </member>
        <member name="M:Editroid.ScreenDoor.Equals(System.Object)">
            <summary>
            Compares if two ScreenDoor objects refer to the same door.
            </summary>
            <param name="obj">The object to compare to.</param>
            <returns>A boolean value indicative of equality.</returns>
        </member>
        <member name="M:Editroid.ScreenDoor.Equals(Editroid.ScreenDoor)">
            <summary>
            Compares if two ScreenDoor objects refer to the same door.
            </summary>
            <param name="obj">The object to compare to.</param>
            <returns>A boolean value indicative of equality.</returns>
        </member>
        <member name="M:Editroid.ScreenDoor.#ctor(System.Byte[],System.Int32)">
            <summary>
            Instantiates this object from the specified raw data
            </summary>
            <param name="data">ROM data</param>
            <param name="offset">location of raw data</param>
        </member>
        <member name="M:Editroid.ScreenDoor.ToString">
            <summary>
            Gets a string representation of this object.
            </summary>
            <returns>A string representation of this object.</returns>
        </member>
        <member name="P:Editroid.ScreenDoor.IsNothing">
            <summary>
            Returns whether or not this object equals ScreenDoor.Nothing.
            </summary>
        </member>
        <member name="P:Editroid.ScreenDoor.Offset">
            <summary>
            Gets the location of this door's data in the ROM.
            </summary>
        </member>
        <member name="P:Editroid.ScreenDoor.Side">
            <summary>
            Gets/sets the side of the screen that the door is located on
            </summary>
        </member>
        <member name="P:Editroid.ScreenDoor.Type">
            <summary>
            Gets/sets the type of door
            </summary>
        </member>
        <member name="P:Editroid.ScreenDoor.IsValid">
            <summary>
            Performs a check to validate the data this object refers to.
            </summary>
        </member>
        <member name="P:Editroid.ScreenDoor.PreviousItem">
            <summary>
            Gets the item that preceeds this item.
            </summary>							  
            <remarks>This function simply performs a seek operation on the
            ROM data and returns the item an an earlier offset. Since screen
            items are not aware of eachother, no check
            is made to ensure that the data is valid or in range.</remarks>
        </member>
        <member name="T:Editroid.ScreenEnemy">
            <summary>
            Represents an enemy within a room.
            </summary>
        </member>
        <member name="F:Editroid.ScreenEnemy.RespawnSprite">
            <summary>
            A sprite to be rendered adjacent to an enemy to indicate that it respawns.
            </summary>
        </member>
        <member name="F:Editroid.ScreenEnemy.Nothing">
            <summary>
            A ScreenEnemy object with no value.
            </summary>
        </member>
        <member name="M:Editroid.ScreenEnemy.Equals(System.Object)">
            <summary>
            Compares two ScreenEnemy objects for equality.
            </summary>
            <param name="obj">The object to compare.</param>
            <returns>A boolean value indicating equality.</returns>
        </member>
        <member name="M:Editroid.ScreenEnemy.#ctor(System.Byte[],System.Int32)">
            <summary>
            Creates an object from raw ROM data
            </summary>
            <param name="data">ROM data</param>
            <param name="offset">location of object data in ROM</param>
        </member>
        <member name="M:Editroid.ScreenEnemy.ToString">
            <summary>
            Gets a string representation of this object.
            </summary>
            <returns>A string representation of this object.</returns>
        </member>
        <member name="P:Editroid.ScreenEnemy.PreviousItem">
            <summary>
            Gets the item that preceeds this item.
            </summary>							  
            <remarks>This function simply performs a seek operation on the
            ROM data and returns the item an an earlier offset. Since screen
            items are not aware of eachother, no check
            is made to ensure that the data is valid or in range.</remarks>
        </member>
        <member name="P:Editroid.ScreenEnemy.IsNothing">
            <summary>
            Returns true if this object is equal to ScreenEnemy.Nothing.
            </summary>
        </member>
        <member name="P:Editroid.ScreenEnemy.SpriteSlot">
            <summary>
            Gets/sets the sprite slot this sprite is loaded into.
            </summary>
            <remarks>A sprite slot is an area in NES memory where sprite data is loaded.
            When moving from screen to screen, if a sprite is already loaded in a slot
            in the first screen and a sprite is specified for the same slot in the
            second screen the sprite will not be loaded. This can be used to create
            a seeming randomness to which enemies might appear in a screen.</remarks>
        </member>
        <member name="P:Editroid.ScreenEnemy.Respawn">
            <summary>
            Gets/sets whether this enemy respawns.
            </summary>
        </member>
        <member name="P:Editroid.ScreenEnemy.Offset">
            <summary>
            Gets the offset of this enemy in the ROM.
            </summary>
        </member>
        <member name="P:Editroid.ScreenEnemy.SpritePal">
            <summary>
            Gets/sets a value indicating which palette should be used for a sprite.
            </summary>
            <remarks>This value does not represent the actual palette number.
            Correctly formatted data will generally have a value of zero to
            specify a default palette, which varies by level (and perhaps by enemy). A value of eight
            will indicate a secondary palette to be used, which can also vary.</remarks>
        </member>
        <member name="P:Editroid.ScreenEnemy.EnemyType">
            <summary>
            Gets/sets the type of enemy that this ScreenEnemy represents.
            </summary>
            <remarks>For valid enemy types, the Editroid.Graphic.Sprite class
            defines corresponding sprite images composed of tiles from the sprite
            pattern table.</remarks>
        </member>
        <member name="P:Editroid.ScreenEnemy.Y">
            <summary>
            Gets/sets the Y-coordinate of an enemy.
            </summary>
        </member>
        <member name="P:Editroid.ScreenEnemy.X">
            <summary>
            Gets/sets the X-coordinate of an enemy.
            </summary>
        </member>
        <member name="T:Editroid.DoorSide">
            <summary>
            Indicates which side of the screen a door appears on
            </summary>
        </member>
        <member name="F:Editroid.DoorSide.Left">
            <summary>
            Signifies that a door is on the left side of the screen
            </summary>
        </member>
        <member name="F:Editroid.DoorSide.Right">
            <summary>
            Signifies that a door is on the right side of the screen
            </summary>
        </member>
        <member name="F:Editroid.DoorSide.Invalid">
            <summary>
            Indicates an invalid value. This indicates invalid data was read. DoorSide.Invalid should never be written back into data.
            </summary>
        </member>
        <member name="T:Editroid.DoorType">
            <summary>
            Represents a type of door
            </summary>
        </member>
        <member name="F:Editroid.DoorType.Missile">
            <summary>
            Represents a door that must be shot with five missiles in order to be opened
            </summary>
        </member>
        <member name="F:Editroid.DoorType.Normal">
            <summary>
            Represents a door that can be opened with any weapon
            </summary>
        </member>
        <member name="F:Editroid.DoorType.TenMissile">
            <summary>
            Represents a door that must be shot with ten missiles in order to be opened
            </summary>
        </member>
        <member name="F:Editroid.DoorType.Invalid">
            <summary>
            Represents an invalid value. This indicates invalid data was read. This value should never be written back into data.
            </summary>
        </member>
        <member name="T:ImageQuantization.OctreeQuantizer">
            <summary>
            Quantize using an Octree
            </summary>
        </member>
        <member name="T:ImageQuantization.Quantizer">
            <summary>
            Summary description for Class1.
            </summary>
        </member>
        <member name="M:ImageQuantization.Quantizer.#ctor(System.Boolean)">
            <summary>
            Construct the quantizer
            </summary>
            <param name="singlePass">If true, the quantization only needs to loop through the source pixels once</param>
            <remarks>
            If you construct this class with a true value for singlePass, then the code will, when quantizing your image,
            only call the 'QuantizeImage' function. If two passes are required, the code will call 'InitialQuantizeImage'
            and then 'QuantizeImage'.
            </remarks>
        </member>
        <member name="M:ImageQuantization.Quantizer.Quantize(System.Drawing.Image)">
            <summary>
            Quantize an image and return the resulting output bitmap
            </summary>
            <param name="source">The image to quantize</param>
            <returns>A quantized version of the image</returns>
        </member>
        <member name="M:ImageQuantization.Quantizer.FirstPass(System.Byte[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Execute the first pass through the pixels in the image
            </summary>
            <param name="sourceData">The source data</param>
            <param name="width">The width in pixels of the image</param>
            <param name="height">The height in pixels of the image</param>
            <param name="stride"></param>
        </member>
        <member name="M:ImageQuantization.Quantizer.SecondPass(System.Byte[],System.Drawing.Bitmap,System.Int32,System.Int32,System.Drawing.Rectangle,System.Int32)">
            <summary>
            Execute a second pass through the bitmap
            </summary>
            <param name="sourceData">The source bitmap, locked into memory</param>
            <param name="output">The output bitmap</param>
            <param name="width">The width in pixels of the image</param>
            <param name="height">The height in pixels of the image</param>
            <param name="bounds">The bounding rectangle</param>
            <param name="stride"></param>
        </member>
        <member name="M:ImageQuantization.Quantizer.InitialQuantizePixel(ImageQuantization.Quantizer.Color32)">
            <summary>
            Override this to process the pixel in the first pass of the algorithm
            </summary>
            <param name="pixel">The pixel to quantize</param>
            <remarks>
            This function need only be overridden if your quantize algorithm needs two passes,
            such as an Octree quantizer.
            </remarks>
        </member>
        <member name="M:ImageQuantization.Quantizer.QuantizePixel(ImageQuantization.Quantizer.Color32)">
            <summary>
            Override this to process the pixel in the second pass of the algorithm
            </summary>
            <param name="pixel">The pixel to quantize</param>
            <returns>The quantized value</returns>
        </member>
        <member name="M:ImageQuantization.Quantizer.GetPalette(System.Drawing.Imaging.ColorPalette)">
            <summary>
            Retrieve the palette for the quantized image
            </summary>
            <param name="original">Any old palette, this is overrwritten</param>
            <returns>The new color palette</returns>
        </member>
        <member name="F:ImageQuantization.Quantizer._singlePass">
            <summary>
            Flag used to indicate whether a single pass or two passes are needed for quantization.
            </summary>
        </member>
        <member name="T:ImageQuantization.Quantizer.Color32">
            <summary>
            Struct that defines a 32 bpp colour
            </summary>
            <remarks>
            This struct is used to read data from a 32 bits per pixel image
            in memory, and is ordered in this manner as this is the way that
            the data is layed out in memory
            </remarks>
        </member>
        <member name="M:ImageQuantization.Quantizer.Color32.#ctor(System.IntPtr)">
            <summary>
            
            </summary>
            <param name="pSourcePixel"></param>
        </member>
        <member name="M:ImageQuantization.Quantizer.Color32.#ctor(System.Byte[],System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="data"></param>
            <param name="offset"></param>
        </member>
        <member name="F:ImageQuantization.Quantizer.Color32.Blue">
            <summary>
            Holds the blue component of the colour
            </summary>
        </member>
        <member name="F:ImageQuantization.Quantizer.Color32.Green">
            <summary>
            Holds the green component of the colour
            </summary>
        </member>
        <member name="F:ImageQuantization.Quantizer.Color32.Red">
            <summary>
            Holds the red component of the colour
            </summary>
        </member>
        <member name="F:ImageQuantization.Quantizer.Color32.Alpha">
            <summary>
            Holds the alpha component of the colour
            </summary>
        </member>
        <member name="F:ImageQuantization.Quantizer.Color32.ARGB">
            <summary>
            Permits the color32 to be treated as an int32
            </summary>
        </member>
        <member name="P:ImageQuantization.Quantizer.Color32.Color">
            <summary>
            Return the color for this Color32 object
            </summary>
        </member>
        <member name="M:ImageQuantization.OctreeQuantizer.#ctor(System.Int32,System.Int32)">
            <summary>
            Construct the octree quantizer
            </summary>
            <remarks>
            The Octree quantizer is a two pass algorithm. The initial pass sets up the octree,
            the second pass quantizes a color based on the nodes in the tree
            </remarks>
            <param name="maxColors">The maximum number of colors to return</param>
            <param name="maxColorBits">The number of significant bits</param>
        </member>
        <member name="M:ImageQuantization.OctreeQuantizer.InitialQuantizePixel(ImageQuantization.Quantizer.Color32)">
            <summary>
            Process the pixel in the first pass of the algorithm
            </summary>
            <param name="pixel">The pixel to quantize</param>
            <remarks>
            This function need only be overridden if your quantize algorithm needs two passes,
            such as an Octree quantizer.
            </remarks>
        </member>
        <member name="M:ImageQuantization.OctreeQuantizer.QuantizePixel(ImageQuantization.Quantizer.Color32)">
            <summary>
            Override this to process the pixel in the second pass of the algorithm
            </summary>
            <param name="pixel">The pixel to quantize</param>
            <returns>The quantized value</returns>
        </member>
        <member name="M:ImageQuantization.OctreeQuantizer.GetPalette(System.Drawing.Imaging.ColorPalette)">
            <summary>
            Retrieve the palette for the quantized image
            </summary>
            <param name="original">Any old palette, this is overrwritten</param>
            <returns>The new color palette</returns>
        </member>
        <member name="F:ImageQuantization.OctreeQuantizer._octree">
            <summary>
            Stores the tree
            </summary>
        </member>
        <member name="F:ImageQuantization.OctreeQuantizer._maxColors">
            <summary>
            Maximum allowed color depth
            </summary>
        </member>
        <member name="T:ImageQuantization.OctreeQuantizer.Octree">
            <summary>
            Class which does the actual quantization
            </summary>
        </member>
        <member name="M:ImageQuantization.OctreeQuantizer.Octree.#ctor(System.Int32)">
            <summary>
            Construct the octree
            </summary>
            <param name="maxColorBits">The maximum number of significant bits in the image</param>
        </member>
        <member name="M:ImageQuantization.OctreeQuantizer.Octree.AddColor(ImageQuantization.Quantizer.Color32)">
            <summary>
            Add a given color value to the octree
            </summary>
            <param name="pixel"></param>
        </member>
        <member name="M:ImageQuantization.OctreeQuantizer.Octree.Reduce">
            <summary>
            Reduce the depth of the tree
            </summary>
        </member>
        <member name="M:ImageQuantization.OctreeQuantizer.Octree.TrackPrevious(ImageQuantization.OctreeQuantizer.Octree.OctreeNode)">
            <summary>
            Keep track of the previous node that was quantized
            </summary>
            <param name="node">The node last quantized</param>
        </member>
        <member name="M:ImageQuantization.OctreeQuantizer.Octree.Palletize(System.Int32)">
            <summary>
            Convert the nodes in the octree to a palette with a maximum of colorCount colors
            </summary>
            <param name="colorCount">The maximum number of colors</param>
            <returns>An arraylist with the palettized colors</returns>
        </member>
        <member name="M:ImageQuantization.OctreeQuantizer.Octree.GetPaletteIndex(ImageQuantization.Quantizer.Color32)">
            <summary>
            Get the palette index for the passed color
            </summary>
            <param name="pixel"></param>
            <returns></returns>
        </member>
        <member name="F:ImageQuantization.OctreeQuantizer.Octree.mask">
            <summary>
            Mask used when getting the appropriate pixels for a given node
            </summary>
        </member>
        <member name="F:ImageQuantization.OctreeQuantizer.Octree._root">
            <summary>
            The root of the octree
            </summary>
        </member>
        <member name="F:ImageQuantization.OctreeQuantizer.Octree._leafCount">
            <summary>
            Number of leaves in the tree
            </summary>
        </member>
        <member name="F:ImageQuantization.OctreeQuantizer.Octree._reducibleNodes">
            <summary>
            Array of reducible nodes
            </summary>
        </member>
        <member name="F:ImageQuantization.OctreeQuantizer.Octree._maxColorBits">
            <summary>
            Maximum number of significant bits in the image
            </summary>
        </member>
        <member name="F:ImageQuantization.OctreeQuantizer.Octree._previousNode">
            <summary>
            Store the last node quantized
            </summary>
        </member>
        <member name="F:ImageQuantization.OctreeQuantizer.Octree._previousColor">
            <summary>
            Cache the previous color quantized
            </summary>
        </member>
        <member name="P:ImageQuantization.OctreeQuantizer.Octree.Leaves">
            <summary>
            Get/Set the number of leaves in the tree
            </summary>
        </member>
        <member name="P:ImageQuantization.OctreeQuantizer.Octree.ReducibleNodes">
            <summary>
            Return the array of reducible nodes
            </summary>
        </member>
        <member name="T:ImageQuantization.OctreeQuantizer.Octree.OctreeNode">
            <summary>
            Class which encapsulates each node in the tree
            </summary>
        </member>
        <member name="M:ImageQuantization.OctreeQuantizer.Octree.OctreeNode.#ctor(System.Int32,System.Int32,ImageQuantization.OctreeQuantizer.Octree)">
            <summary>
            Construct the node
            </summary>
            <param name="level">The level in the tree = 0 - 7</param>
            <param name="colorBits">The number of significant color bits in the image</param>
            <param name="octree">The tree to which this node belongs</param>
        </member>
        <member name="M:ImageQuantization.OctreeQuantizer.Octree.OctreeNode.AddColor(ImageQuantization.Quantizer.Color32,System.Int32,System.Int32,ImageQuantization.OctreeQuantizer.Octree)">
            <summary>
            Add a color into the tree
            </summary>
            <param name="pixel">The color</param>
            <param name="colorBits">The number of significant color bits</param>
            <param name="level">The level in the tree</param>
            <param name="octree">The tree to which this node belongs</param>
        </member>
        <member name="M:ImageQuantization.OctreeQuantizer.Octree.OctreeNode.Reduce">
            <summary>
            Reduce this node by removing all of its children
            </summary>
            <returns>The number of leaves removed</returns>
        </member>
        <member name="M:ImageQuantization.OctreeQuantizer.Octree.OctreeNode.ConstructPalette(System.Collections.ArrayList,System.Int32@)">
            <summary>
            Traverse the tree, building up the color palette
            </summary>
            <param name="palette">The palette</param>
            <param name="paletteIndex">The current palette index</param>
        </member>
        <member name="M:ImageQuantization.OctreeQuantizer.Octree.OctreeNode.GetPaletteIndex(ImageQuantization.Quantizer.Color32,System.Int32)">
            <summary>
            Return the palette index for the passed color
            </summary>
        </member>
        <member name="M:ImageQuantization.OctreeQuantizer.Octree.OctreeNode.Increment(ImageQuantization.Quantizer.Color32)">
            <summary>
            Increment the pixel count and add to the color information
            </summary>
        </member>
        <member name="F:ImageQuantization.OctreeQuantizer.Octree.OctreeNode._leaf">
            <summary>
            Flag indicating that this is a leaf node
            </summary>
        </member>
        <member name="F:ImageQuantization.OctreeQuantizer.Octree.OctreeNode._pixelCount">
            <summary>
            Number of pixels in this node
            </summary>
        </member>
        <member name="F:ImageQuantization.OctreeQuantizer.Octree.OctreeNode._red">
            <summary>
            Red component
            </summary>
        </member>
        <member name="F:ImageQuantization.OctreeQuantizer.Octree.OctreeNode._green">
            <summary>
            Green Component
            </summary>
        </member>
        <member name="F:ImageQuantization.OctreeQuantizer.Octree.OctreeNode._blue">
            <summary>
            Blue component
            </summary>
        </member>
        <member name="F:ImageQuantization.OctreeQuantizer.Octree.OctreeNode._children">
            <summary>
            Pointers to any child nodes
            </summary>
        </member>
        <member name="F:ImageQuantization.OctreeQuantizer.Octree.OctreeNode._nextReducible">
            <summary>
            Pointer to next reducible node
            </summary>
        </member>
        <member name="F:ImageQuantization.OctreeQuantizer.Octree.OctreeNode._paletteIndex">
            <summary>
            The index of this node in the palette
            </summary>
        </member>
        <member name="P:ImageQuantization.OctreeQuantizer.Octree.OctreeNode.NextReducible">
            <summary>
            Get/Set the next reducible node
            </summary>
        </member>
        <member name="P:ImageQuantization.OctreeQuantizer.Octree.OctreeNode.Children">
            <summary>
            Return the child nodes
            </summary>
        </member>
        <member name="F:Editroid.frmTitleText.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Editroid.frmTitleText.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Editroid.frmTitleText.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Editroid.frmStruct.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Editroid.frmStruct.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Editroid.frmStruct.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Editroid.frmStruct.LoadRomData">
            <summary>Loads data from a ROM necessary for editing features..</summary>
        </member>
        <member name="M:Editroid.frmStruct.DisplayCurrentStruct">
            <summary>Opens the struct specified by the StructIndex property for editing.</summary>
        </member>
        <member name="M:Editroid.frmStruct.WriteStructsToRom">
            <summary>
            Records all structs back to the ROM data.
            </summary>
        </member>
        <member name="F:Editroid.frmStruct.lastMouseX">
            <summary>Tracks mouse position for context menu display position.</summary>
        </member>
        <member name="F:Editroid.frmStruct.lastMouseY">
            <summary>Tracks mouse position for context menu display position.</summary>
        </member>
        <member name="F:Editroid.frmStruct.clickedMouseX">
            <summary>Tracks mouse position for context menu display position.</summary>
        </member>
        <member name="F:Editroid.frmStruct.clickedMouseY">
            <summary>Tracks mouse position for context menu display position.</summary>
        </member>
        <member name="M:Editroid.frmStruct.ShiftLeft(System.Int32)">
            <summary>Shifts a row left. If there are tiles on the left edge they will be cropped.</summary>
        </member>
        <member name="M:Editroid.frmStruct.ShiftRight(System.Int32)">
            <summary>Shifts a row right.</summary>
        </member>
        <member name="M:Editroid.frmStruct.JoinRows(System.Int32)">
            <summary>
            Joins two rows of a struct.
            </summary>
            <param name="firstRowIndex">The index of the first of the two rows to join.</param>
        </member>
        <member name="M:Editroid.frmStruct.CombineRows(System.Byte[],System.Byte[],System.Byte)">
            <summary>Returns an array that is the combination of two arrays with a joining byte.</summary>
            <param name="row1">The first array to join.</param>
            <param name="row2">The second array to join.</param>
            <param name="joiner">The value that will be inserted between the joined arrays.</param>
        </member>
        <member name="M:Editroid.frmStruct.GetRowLength(System.Byte[],System.Boolean)">
            <summary>Gets the length of a row.</summary>
            <param name="row">A byte array representing a row.</param>
            <param name="includeBlanks">If true, preceding blank tiles will be included.</param>
        </member>
        <member name="M:Editroid.frmStruct.GetLevelPalette">
            <summary>Gets a level palette, taking into consideration the UseAlternatePalette property.</summary>
        </member>
        <member name="P:Editroid.frmStruct.StructIndex">
            <summary>
            Gets/sets the currently displayed combo's index
            </summary>
        </member>
        <member name="T:Editroid.Rom">
            <summary>
            Provides an object-oriented and organized mechanism for accessing raw ROM data
            </summary>
        </member>
        <member name="F:Editroid.Rom.TitleText_Line1_Offset">
            <summary>ROM offset of the "PUSH START BUTTON" text.</summary>
        </member>
        <member name="F:Editroid.Rom.TitleText_Line2_Offset">
            <summary>ROM offset of copyright line in title screen.</summary>
        </member>
        <member name="F:Editroid.Rom.TitleText_Line1_Length">
            <summary>Length of the "PUSH START BUTTON" text.</summary>
        </member>
        <member name="F:Editroid.Rom.TitleText_Line2_Length">
            <summary>Length of the copyright line in the title screen.</summary>
        </member>
        <member name="F:Editroid.Rom.data">
            <summary>
            The raw data of the ROM
            </summary>
        </member>
        <member name="M:Editroid.Rom.#ctor(System.IO.Stream)">
            <summary>
            Creates a Editroid.Rom from a stream
            </summary>
            <param name="s">A stream that contains a Metroid ROM image</param>
        </member>
        <member name="M:Editroid.Rom.SaveTo(System.IO.Stream)">
            <summary>
            Saves the edited data of this ROM to a stream.
            </summary>
            <param name="s">The stream to output data to.</param>
        </member>
        <member name="M:Editroid.Rom.GetRoomIndex(System.Int32,System.Int32)">
            <summary>
            Gets which screen to use for a specified map position
            </summary>
            <param name="X">The X-coordinate on the map</param>
            <param name="Y">The Y-coordinate on the map</param>
            <returns>The room index of the specified room</returns>
        </member>
        <member name="M:Editroid.Rom.GetRoomIndex(System.Int32)">
            <summary>
            Gets which screen to use for a specified map position
            </summary>
            <param name="roomOffset">The offset of the room</param>
            <returns>The room index of the specified room</returns>
        </member>
        <member name="M:Editroid.Rom.SetRoomIndex(System.Int32,System.Int32,System.Byte)">
            <summary>
            Sets which screen to use for a specified map position
            </summary>
            <param name="X">The X-coordinate of the room</param>
            <param name="Y">The Y-coordinate of the room</param>
            <param name="value">The index of the room</param>
        </member>
        <member name="M:Editroid.Rom.SetRoomIndex(System.Int32,System.Byte)">
            <summary>
            Sets which screen to use for a specified map position
            </summary>
            <param name="Value">The index of the room</param>
            <param name="roomOffset">The index of the room</param>
        </member>
        <member name="M:Editroid.Rom.GetLevel(Editroid.Levels)">
            <summary>
            Returns a Editroid.Level based on the specified value.
            </summary>
            <param name="level">The level to get</param>
            <returns>A Editroid.Level based on the specified value</returns>
        </member>
        <member name="M:Editroid.Rom.GetRomText(System.Int32,System.Int32)">
            <summary>
            Converts game text into a unicode string.
            </summary>
            <param name="offset">ROM offset to load data from.</param>
            <param name="length">The number of characters to load.</param>
            <returns>A string representation of ROM text.</returns>
            <remarks>Invalid or unknown data will be converted to underscores.</remarks>
        </member>
        <member name="M:Editroid.Rom.SetRomText(System.Int32,System.String)">
            <summary>
            Converts a unicode string into Metroid formatted text and writes it to the ROM.
            </summary>
            <param name="offset">The offset to write the string to.</param>
            <param name="text">The text to write to the ROM.</param>
            <remarks>Underscores will be ignored and the ROM data in their place
            will remain. This is done so that invalid or unknown data will remain 
            intact in a round-trip operation, but can have unforseen consequences
            if data is inserted or removed from the a string during a round-trip
            operation, or if text happens to have underscores in it.</remarks>
        </member>
        <member name="M:Editroid.Rom.GetLevel(Editroid.Levels,Editroid.Levels)">
            <summary>
            Returns a Editroid.Level based on the specified value.
            </summary>
            <param name="level">The level to get</param>
            <param name="defaultLevel">The level to use if the level parameter is invalid.</param>
            <returns>A Editroid.Level based on the specified value</returns>
        </member>
        <member name="P:Editroid.Rom.PasswordData">
            <summary>
            Gets/sets password data for this level.
            </summary>
        </member>
        <member name="P:Editroid.Rom.Brinstar">
            <summary>
            Brinstar level data.
            </summary>
        </member>
        <member name="P:Editroid.Rom.Ridley">
            <summary>
            Ridley level data.
            </summary>
        </member>
        <member name="P:Editroid.Rom.Kraid">
            <summary>
            Kraid level data.
            </summary>
        </member>
        <member name="P:Editroid.Rom.Tourain">
            <summary>
            Tourain level data.
            </summary>
        </member>
        <member name="P:Editroid.Rom.Norfair">
            <summary>
            Norfair level data.
            </summary>
        </member>
        <member name="P:Editroid.Rom.TitleText_Line1">
            <summary>
            Gets or sets the text displayed below "Metroid" on the title screen.
            </summary>
        </member>
        <member name="P:Editroid.Rom.TitleText_Line2">
            <summary>
            Gets or sets the copyright line on the title screen.
            </summary>
        </member>
        <member name="F:Editroid.frmComboEditor.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Editroid.frmComboEditor.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Editroid.frmComboEditor.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Editroid.frmComboEditor.LoadTiles(Editroid.Levels)">
            <summary>Returns tiles for the specified level AND loads all tiles and palettes for that level if they arent already loaded.</summary>
        </member>
        <member name="T:Editroid.RomValues">
            <summary>
            This class contains constants that are found within raw ROM data
            </summary>
        </member>
        <member name="F:Editroid.RomValues.EndOfObjects">
            <summary>
            This value marks the end of a room's list of objects.
            </summary>
        </member>
        <member name="F:Editroid.RomValues.EndOfScreenData">
            <summary>
            This value marks the end of a room's data. This usually follows enemy data.
            </summary>
        </member>
        <member name="F:Editroid.RomValues.EndOfStructData">
            <summary>
            This value marks the end of a structs's data.
            </summary>
        </member>
        <member name="F:Editroid.RomValues.DoorMarker">
            <summary>
            This value identifies door data items in enemey data.
            </summary>
        </member>
        <member name="F:Editroid.RomValues.DoorMarkerItemData">
            <summary>
            This value identifies door data items in item data.
            </summary>
        </member>
        <member name="F:Editroid.RomValues.EnemyMarker">
            <summary>
            This value identifies enemy data items in enemy data and item data.
            </summary>
        </member>
        <member name="F:Editroid.RomValues.RespawnEnemyMarker">
            <summary>
            This value identifies enemy data items for enemies that respawn in enemy data.
            </summary>
        </member>
        <member name="F:Editroid.RomValues.TourainAccessBridgeMarker">
            <summary>
            This value identifies the tourain access bridge in enemy data.
            </summary>
        </member>
        <member name="T:Editroid.NesPalette">
            <summary>
            Represents a 16-color NES palette composed of four color tables.
            </summary>
            <remarks>This class stores data locally. Changes will not be reflected in the ROM.</remarks>
        </member>
        <member name="M:Editroid.NesPalette.#ctor">
            <summary>
            Creates a palette with default values.
            </summary>
        </member>
        <member name="M:Editroid.NesPalette.#ctor(System.Byte[],System.Int32)">
            <summary>
            Loads palette data for four consecutive color tables (total of 16 colors) from an NES rom.
            </summary>
            <param name="data">ROM image</param>
            <param name="offset">Location of data</param>
        </member>
        <member name="F:Editroid.NesPalette.Table">
            <summary>
            Sixteen bytes, each of which indexes an NES color
            </summary>
        </member>
        <member name="M:Editroid.NesPalette.GetEntry(System.Int32)">
            <summary>
            Gets a palette entry from this palette.
            </summary>
            <param name="index">The index of the entry to get.</param>
            <returns>A color corresponding to an NES palette color.</returns>
        </member>
        <member name="M:Editroid.NesPalette.ApplyTable(System.Drawing.Color[])">
            <summary>
            Applies the colors that this palette represents to a color array
            </summary>
            <param name="colors">Color array to modify</param>
        </member>
        <member name="M:Editroid.NesPalette.ApplyTable(System.Drawing.Color[],System.Int32)">
            <summary>
            Applies the colors that this palette represents to a color array
            </summary>
            <param name="colors">Color array to modify</param>
            <param name="offset">Where in the array these colors should appear</param>
        </member>
        <member name="M:Editroid.NesPalette.ApplyTable(System.Drawing.Color[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Applies the colors that this palette represents to a color array
            </summary>
            <param name="colors">Color array to modify</param>
            <param name="offset">Where in the array these colors should appear</param>
            <param name="start">Which color in the palette to start copying from</param>
            <param name="count">How many colors to copy</param>
        </member>
        <member name="M:Editroid.NesPalette.GetBackgroundOffset(Editroid.Levels)">
            <summary>
            Gets the offset of the background palette for the specified level
            </summary>
            <param name="level">a Metroid level</param>
            <returns>The offset of the background palette for the specified level</returns>
        </member>
        <member name="M:Editroid.NesPalette.GetSpriteOffset(Editroid.Levels)">
            <summary>
            Gets the offset of the sprite palette for the specified level
            </summary>
            <param name="level">a Metroid level</param>
            <returns>The offset of the background palette for the specified level</returns>
        </member>
        <member name="M:Editroid.NesPalette.GetAltBackgroundOffset(Editroid.Levels)">
            <summary>
            Gets the offset of the background palette for the specified level
            </summary>
            <param name="level">a Metroid level</param>
            <returns>The offset of the background palette for the specified level</returns>
        </member>
        <member name="F:Editroid.NesPalette.NesColors">
            <summary>
            This is full the color palette used for rendering NES graphics.
            The first sixty-four colors are the colors used by the NES. These
            can be changed to suit need if necessary. The remaining colors
            are there to complete a 256-color palette and can be used any way,
            but are initialized to black.
            </summary>
        </member>
        <member name="F:Editroid.NesPalette.HighlightEntry">
            <summary>
            The index of the palette entry reserved to hold the system's highlight color.
            </summary>
        </member>
        <member name="P:Editroid.NesPalette.Offset">
            <summary>Gets the offset of the palette data in the ROM.</summary>
        </member>
        <member name="P:Editroid.NesPalette.BrinstarBackgroundOffset">
            <summary>
            Offset of the background palettes for Brinstar.
            </summary>
        </member>
        <member name="P:Editroid.NesPalette.NorfairBackgroundOffset">
            <summary>
            Offset of the background palettes for Norfair.
            </summary>
        </member>
        <member name="P:Editroid.NesPalette.KraidBackgroundOffset">
            <summary>
            Offset of the background palettes for Kraid.
            </summary>
        </member>
        <member name="P:Editroid.NesPalette.RidleyBackgroundOffset">
            <summary>
            Offset of the background palettes for Ridley.
            </summary>
        </member>
        <member name="P:Editroid.NesPalette.TourainBackgroundOffset">
            <summary>
            Offset of the background palettes for Tourain.
            </summary>
        </member>
        <member name="P:Editroid.NesPalette.BrinstarAltBackgroundOffset">
            <summary>
            Offset of the background palettes for Brinstar.
            </summary>
        </member>
        <member name="P:Editroid.NesPalette.NorfairAltBackgroundOffset">
            <summary>
            Offset of the background palettes for Norfair.
            </summary>
        </member>
        <member name="P:Editroid.NesPalette.KraidAltBackgroundOffset">
            <summary>
            Offset of the background palettes for Kraid.
            </summary>
        </member>
        <member name="P:Editroid.NesPalette.RidleyAltBackgroundOffset">
            <summary>
            Offset of the background palettes for Ridley.
            </summary>
        </member>
        <member name="P:Editroid.NesPalette.TourainAltBackgroundOffset">
            <summary>
            Offset of the background palettes for Tourain.
            </summary>
        </member>
        <member name="P:Editroid.NesPalette.BrinstarSpriteOffset">
            <summary>
            Offset of the sprite palettes for Brinstar.
            </summary>
        </member>
        <member name="P:Editroid.NesPalette.NorfairSpriteOffset">
            <summary>
            Offset of the sprite palettes for Norfair.
            </summary>
        </member>
        <member name="P:Editroid.NesPalette.KraidSpriteOffset">
            <summary>
            Offset of the sprite palettes for Kraid.
            </summary>
        </member>
        <member name="P:Editroid.NesPalette.RidleySpriteOffset">
            <summary>
            Offset of the sprite palettes for Ridley.
            </summary>
        </member>
        <member name="P:Editroid.NesPalette.TourainSpriteOffset">
            <summary>
            Offset of the sprite palettes for Tourain.
            </summary>
        </member>
        <member name="T:Editroid.frmPointer">
            <summary>
            Form that allows conversion of pointers from ROM offset values to Metroid pointers.
            </summary>
        </member>
        <member name="F:Editroid.frmPointer.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Editroid.frmPointer.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Editroid.frmPointer.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Editroid.frmPointer.#ctor">
            <summary>
            Instantiates this class.
            </summary>
        </member>
        <member name="T:Editroid.ROM.ItemTable">
            <summary>
            Represents item data for a level.
            </summary>
        </member>
        <member name="M:Editroid.ROM.ItemTable.#ctor(Editroid.Levels,System.Byte[])">
            <summary>
            Constructor.
            </summary>
            <param name="level"></param>
            <param name="data"></param>
        </member>
        <member name="M:Editroid.ROM.ItemTable.ResortEntries">
            <summary>
            Re-orders item data entries to prevent parsing problems caused by
            entries being out of logical order.
            </summary>
        </member>
        <member name="M:Editroid.ROM.ItemTable.GetItemTableOffset(Editroid.Levels,System.Byte[])">
            <summary>
            Gets the offset of an item table.
            </summary>
            <param name="level">The level the item table belongs to.</param>
            <param name="data">ROM data to obtain offset from.</param>
            <returns>The offset of an item table.</returns>
        </member>
        <member name="M:Editroid.ROM.ItemTable.GetItemTablePointerOffset">
            <summary>
            Gets a offset of a pointer to the item table (or a "handle" to the item table).
            </summary>
            <returns>A offset of a pointer to the item table (or a "handle" to the item table).</returns>
        </member>
        <member name="T:Editroid.ROM.ItemEntry">
            <summary>
            Represents an item data entry, which contains one or more items from the
            same level on the same horizontal row on the map.
            </summary>
        </member>
        <member name="M:Editroid.ROM.ItemEntry.#ctor(Editroid.Levels,System.Byte[],System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="level"></param>
            <param name="data"></param>
            <param name="offset"></param>
        </member>
        <member name="M:Editroid.ROM.ItemEntry.Seek">
            <summary>
            Provides an object to enumerate items.
            </summary>
            <returns>An ItemSeeker.</returns>
        </member>
        <member name="P:Editroid.ROM.ItemEntry.Offset">
            <summary>Gets the offset of this entry.</summary>
        </member>
        <member name="P:Editroid.ROM.ItemEntry.MapY">
            <summary>
            Gets or sets the vertical map position of this item.
            </summary>
        </member>
        <member name="P:Editroid.ROM.ItemEntry.NextEntryPointer">
            <summary>
            Gets a metroid pointer to the next entry.
            </summary>
        </member>
        <member name="P:Editroid.ROM.ItemEntry.NextEntryOffset">
            <summary>
            Gets the offset of the next entry.
            </summary>
        </member>
        <member name="P:Editroid.ROM.ItemEntry.HasNextEntry">
            <summary>Gets whether there is an item entry following this one.</summary>
        </member>
        <member name="T:Editroid.ROM.ItemSeeker">
            <summary>
            Provides a mechanism to seek through screen entries in an item data entry,
            and thorugh items if there are multiple items in a screen.
            </summary>
        </member>
        <member name="F:Editroid.ROM.ItemSeeker.startOffset">
            <summary></summary>
        </member>
        <member name="F:Editroid.ROM.ItemSeeker.screenOffset">
            <summary></summary>
        </member>
        <member name="F:Editroid.ROM.ItemSeeker.itemOffset">
            <summary></summary>
        </member>
        <member name="M:Editroid.ROM.ItemSeeker.#ctor(System.Int32,System.Byte[])">
            <summary>
            Instantiates this object.
            </summary>
            <param name="offset">The offset of screen data from an item entry (follows 3-byte header of item data entry).</param>
            <param name="data">ROM data.</param>
        </member>
        <member name="M:Editroid.ROM.ItemSeeker.NextItem">
            <summary>
            Seeks to the next item, if there are more items in the screen.
            </summary>
        </member>
        <member name="M:Editroid.ROM.ItemSeeker.ResetItemPointer">
            <summary>
            Seeks to the first item in the screen being examined.
            </summary>
        </member>
        <member name="M:Editroid.ROM.ItemSeeker.ResetSeeker">
            <summary>
            Seeks to the first room in the item entry.
            </summary>
        </member>
        <member name="M:Editroid.ROM.ItemSeeker.NextScreen">
            <summary>
            Seeks to the next screen, if there are more screens in this item data entry.
            </summary>
            <returns>True if the seeker is pointing at another screen data after the operation, or false if the seeker is beyond the end of screen data.</returns>
        </member>
        <member name="P:Editroid.ROM.ItemSeeker.Data">
            <summary>Gets the ROM data this object represents.</summary>
        </member>
        <member name="P:Editroid.ROM.ItemSeeker.MapX">
            <summary>
            Gets/sets the x-coordinate of the screen being examined.
            </summary>
        </member>
        <member name="P:Editroid.ROM.ItemSeeker.SpriteSlot">
            <summary>
            Gets the sprite slot. This value is irrelevant unless this data represents an enemy.
            </summary>
        </member>
        <member name="P:Editroid.ROM.ItemSeeker.ItemType">
            <summary>
            Gets/sets what type of item is being examined.
            </summary>
        </member>
        <member name="P:Editroid.ROM.ItemSeeker.PowerUp">
            <summary>
            Gets the type of powerup being examined, if the current item is a powerup.
            </summary>
        </member>
        <member name="P:Editroid.ROM.ItemSeeker.Destination">
            <summary>
            Gets/sets the destination of the elevator being examined, if the current item is an elevator.
            </summary>
        </member>
        <member name="P:Editroid.ROM.ItemSeeker.ScreenPosition">
            <summary>
            Gets/sets the location of this power-up, if the item being examined is a power-up.
            </summary>
        </member>
        <member name="P:Editroid.ROM.ItemSeeker.currentItemDataSize">
            <summary>
            Gets the size, in bytes, of the data for the current item.
            </summary>
        </member>
        <member name="P:Editroid.ROM.ItemSeeker.MoreItemsPresent">
            <summary>
            Returns true if there are more items in the screen being examined.
            </summary>
        </member>
        <member name="P:Editroid.ROM.ItemSeeker.MoreScreens">
            <summary>
            Gets true if there are more screens in the entry.
            </summary>
        </member>
        <member name="P:Editroid.ROM.ItemSeeker.ScreenEntrySize">
            <summary>
            Gets/sets size of this screen's item data.
            </summary>
        </member>
        <member name="T:Editroid.ROM.ItemType">
            <summary>Represents the different types of items.</summary>
        </member>
        <member name="F:Editroid.ROM.ItemType.Nothing">
            <summary>No item.</summary>
        </member>
        <member name="F:Editroid.ROM.ItemType.Enemy">
            <summary>Enemy.</summary>
        </member>
        <member name="F:Editroid.ROM.ItemType.PowerUp">
            <summary>Power up</summary>
        </member>
        <member name="F:Editroid.ROM.ItemType.Mella">
            <summary>Unknown.</summary>
        </member>
        <member name="F:Editroid.ROM.ItemType.Elevator">
            <summary>Elevator.</summary>
        </member>
        <member name="F:Editroid.ROM.ItemType.Unknown_5">
            <summary>Unknown.</summary>
        </member>
        <member name="F:Editroid.ROM.ItemType.AccessBridge">
            <summary>Bridge to Tourain elevator.</summary>
        </member>
        <member name="F:Editroid.ROM.ItemType.RespawnEnemy">
            <summary>Enemy that respawns.</summary>
        </member>
        <member name="F:Editroid.ROM.ItemType.Rinkas">
            <summary>Unknown.</summary>
        </member>
        <member name="F:Editroid.ROM.ItemType.Door">
            <summary>Unknown.</summary>
        </member>
        <member name="F:Editroid.ROM.ItemType.PalSwap">
            <summary>Palette swap.</summary>
        </member>
        <member name="F:Editroid.ROM.ItemType.Unknown_b">
            <summary>Unknown.</summary>
        </member>
        <member name="F:Editroid.ROM.ItemType.Unknown_c">
            <summary>Unknown.</summary>
        </member>
        <member name="F:Editroid.ROM.ItemType.Unknown_d">
            <summary>Unknown.</summary>
        </member>
        <member name="F:Editroid.ROM.ItemType.Unknown_e">
            <summary>Unknown.</summary>
        </member>
        <member name="F:Editroid.ROM.ItemType.Unknown_f">
            <summary>Unknown.</summary>
        </member>
        <member name="T:Editroid.ROM.PowerUpType">
            <summary>Represents different power ups.</summary>
        </member>
        <member name="F:Editroid.ROM.PowerUpType.Bomb">
            <summary>Maru mari bombs.</summary>
        </member>
        <member name="F:Editroid.ROM.PowerUpType.HiJump">
            <summary>High jump boots.</summary>
        </member>
        <member name="F:Editroid.ROM.PowerUpType.LongBeam">
            <summary>Long beam.</summary>
        </member>
        <member name="F:Editroid.ROM.PowerUpType.ScrewAttack">
            <summary>Screw attack.</summary>
        </member>
        <member name="F:Editroid.ROM.PowerUpType.MaruMari">
            <summary>Maru Mari ("morph ball")</summary>
        </member>
        <member name="F:Editroid.ROM.PowerUpType.Varia">
            <summary>Varia suit.</summary>
        </member>
        <member name="F:Editroid.ROM.PowerUpType.WaveBeam">
            <summary>Wave beam.</summary>
        </member>
        <member name="F:Editroid.ROM.PowerUpType.IceBeam">
            <summary>Ice beam.</summary>
        </member>
        <member name="F:Editroid.ROM.PowerUpType.EnergyTank">
            <summary>Energy tank.</summary>
        </member>
        <member name="F:Editroid.ROM.PowerUpType.Missile">
            <summary>Missile expansion.</summary>
        </member>
        <member name="F:Editroid.ROM.PowerUpType.Invalid_Missile_Dot">
            <summary>Missile expansion with incorrect graphics.</summary>
        </member>
        <member name="F:Editroid.ROM.PowerUpType.Invalid_Missile_Arrow">
            <summary>Missile expansion with incorrect graphics.</summary>
        </member>
        <member name="F:Editroid.ROM.PowerUpType.Unknown_c">
            <summary>Unknown.</summary>
        </member>
        <member name="F:Editroid.ROM.PowerUpType.Unknown_d">
            <summary>Unknown.</summary>
        </member>
        <member name="F:Editroid.ROM.PowerUpType.Unknown_e">
            <summary>Unknown.</summary>
        </member>
        <member name="F:Editroid.ROM.PowerUpType.Unknown_f">
            <summary>Unknown.</summary>
        </member>
        <member name="T:Editroid.ROM.ElevatorDestination">
            <summary>Represents destinations for elevators.</summary>
        </member>
        <member name="F:Editroid.ROM.ElevatorDestination.Brinstar">
            <summary>Brinstar.</summary>
        </member>
        <member name="F:Editroid.ROM.ElevatorDestination.Norfair">
            <summary>Norfair.</summary>
        </member>
        <member name="F:Editroid.ROM.ElevatorDestination.Kraid">
            <summary>Kraid.</summary>
        </member>
        <member name="F:Editroid.ROM.ElevatorDestination.Tourain">
            <summary>Tourain.</summary>
        </member>
        <member name="F:Editroid.ROM.ElevatorDestination.Ridley">
            <summary>Ridley.</summary>
        </member>
        <member name="F:Editroid.ROM.ElevatorDestination.GameEnd">
            <summary>GameEnd.</summary>
        </member>
        <member name="F:Editroid.ROM.ElevatorDestination.ElevatorUp">
            <summary>Flag. Indicates that elevator moves up instead of down.</summary>
        </member>
        <member name="T:Editroid.ROM.ScreenCoordinate">
            <summary>
            Represents the screen coordinate of an item, object, or enemy.
            </summary>
        </member>
        <member name="M:Editroid.ROM.ScreenCoordinate.#ctor(System.Byte)">
            <summary>
            Instantiates this object.
            </summary>
            <param name="value">The byte that contains the data.</param>
        </member>
        <member name="M:Editroid.ROM.ScreenCoordinate.#ctor(System.Int32,System.Int32)">
            <summary>
            Instantiates this object.
            </summary>
            <param name="x">X position.</param>
            <param name="y">Y position.</param>
        </member>
        <member name="P:Editroid.ROM.ScreenCoordinate.X">
            <summary>
            The X coordinate this object represents.
            </summary>
        </member>
        <member name="P:Editroid.ROM.ScreenCoordinate.Y">
            <summary>
            The Y coordinate this object represents.
            </summary>
        </member>
        <member name="P:Editroid.ROM.ScreenCoordinate.Value">
            <summary>
            Gets/sets the data for this object.
            </summary>
        </member>
        <member name="T:ImageQuantization.GrayscaleQuantizer">
            <summary>
            Summary description for PaletteQuantizer.
            </summary>
        </member>
        <member name="T:ImageQuantization.PaletteQuantizer">
            <summary>
            Summary description for PaletteQuantizer.
            </summary>
        </member>
        <member name="M:ImageQuantization.PaletteQuantizer.#ctor(System.Collections.ArrayList)">
            <summary>
            Construct the palette quantizer
            </summary>
            <param name="palette">The color palette to quantize to</param>
            <remarks>
            Palette quantization only requires a single quantization step
            </remarks>
        </member>
        <member name="M:ImageQuantization.PaletteQuantizer.QuantizePixel(ImageQuantization.Quantizer.Color32)">
            <summary>
            Override this to process the pixel in the second pass of the algorithm
            </summary>
            <param name="pixel">The pixel to quantize</param>
            <returns>The quantized value</returns>
        </member>
        <member name="M:ImageQuantization.PaletteQuantizer.GetPalette(System.Drawing.Imaging.ColorPalette)">
            <summary>
            Retrieve the palette for the quantized image
            </summary>
            <param name="palette">Any old palette, this is overrwritten</param>
            <returns>The new color palette</returns>
        </member>
        <member name="F:ImageQuantization.PaletteQuantizer._colorMap">
            <summary>
            Lookup table for colors
            </summary>
        </member>
        <member name="F:ImageQuantization.PaletteQuantizer._colors">
            <summary>
            List of all colors in the palette
            </summary>
        </member>
        <member name="M:ImageQuantization.GrayscaleQuantizer.#ctor">
            <summary>
            Construct the palette quantizer
            </summary>
            <remarks>
            Palette quantization only requires a single quantization step
            </remarks>
        </member>
        <member name="M:ImageQuantization.GrayscaleQuantizer.QuantizePixel(ImageQuantization.Quantizer.Color32)">
            <summary>
            Override this to process the pixel in the second pass of the algorithm
            </summary>
            <param name="pixel">The pixel to quantize</param>
            <returns>The quantized value</returns>
        </member>
        <member name="F:Editroid.frmPointers.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Editroid.frmPointers.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Editroid.frmPointers.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:iLab.Sbl.SblNode">
            <summary>
            Represents a structured binary node.
            </summary>
        </member>
        <member name="F:iLab.Sbl.SblNode.Name">
            <summary>
            The name of this node.
            </summary>
        </member>
        <member name="M:iLab.Sbl.SblNode.FromStream(System.IO.Stream)">
            <summary>
            Returns an SblNode, including any of its subnodes, read from a stream.
            </summary>
            <param name="s">The stream to read a node from.</param>
            <returns>An SblNode.</returns>
        </member>
        <member name="M:iLab.Sbl.SblNode.GroupFromStream(System.IO.Stream)">
            <summary>
            Reads SblNodes from a stream until the end of the stream is encountered.
            </summary>
            <param name="s">The stream from which to read nodes.</param>
            <returns>A group containing all the read nodes.</returns>
            <remarks>This overload requires that the stream allows the Position and Length properties to be
            read.</remarks>
        </member>
        <member name="M:iLab.Sbl.SblNode.AddItem(System.String,System.Int32)">
            <summary>
            Adds an SBL value node to this node.
            </summary>
            <param name="name">The name of the node.</param>
            <param name="value">The value of the node.</param>
            <remarks>This method is provided for convenience and is not optimised for speed.</remarks>
        </member>
        <member name="M:iLab.Sbl.SblNode.AddItem(System.String,System.String)">
            <summary>
            Adds an SBL value node to this node.
            </summary>
            <param name="name">The name of the node.</param>
            <param name="value">The value of the node.</param>
            <remarks>This method is provided for convenience and is not optimised for speed.</remarks>
        </member>
        <member name="M:iLab.Sbl.SblNode.AddItem(System.String,System.Char)">
            <summary>
            Adds an SBL value node to this node.
            </summary>
            <param name="name">The name of the node.</param>
            <param name="value">The value of the node.</param>
            <remarks>This method is provided for convenience and is not optimised for speed.</remarks>
        </member>
        <member name="M:iLab.Sbl.SblNode.AddItem(System.String,System.Int64)">
            <summary>
            Adds an SBL value node to this node.
            </summary>
            <param name="name">The name of the node.</param>
            <param name="value">The value of the node.</param>
            <remarks>This method is provided for convenience and is not optimised for speed.</remarks>
        </member>
        <member name="M:iLab.Sbl.SblNode.AddItem(System.String,System.Single)">
            <summary>
            Adds an SBL value node to this node.
            </summary>
            <param name="name">The name of the node.</param>
            <param name="value">The value of the node.</param>
            <remarks>This method is provided for convenience and is not optimised for speed.</remarks>
        </member>
        <member name="M:iLab.Sbl.SblNode.AddItem(System.String,System.Byte)">
            <summary>
            Adds an SBL value node to this node.
            </summary>
            <param name="name">The name of the node.</param>
            <param name="value">The value of the node.</param>
            <remarks>This method is provided for convenience and is not optimised for speed.</remarks>
        </member>
        <member name="M:iLab.Sbl.SblNode.AddItem(System.String,System.Byte[])">
            <summary>
            Adds an SBL value node to this node.
            </summary>
            <param name="name">The name of the node.</param>
            <param name="value">The value of the node.</param>
            <remarks>This method is provided for convenience and is not optimised for speed.</remarks>
        </member>
        <member name="M:iLab.Sbl.SblNode.GroupFromStream(System.IO.Stream,System.Int32)">
            <summary>
            Reads the specified number of SblNodes from a stream.
            </summary>
            <param name="s">The stream from which to read nodes.</param>
            <param name="nodeCount">The number of nodes to read.</param>
            <returns>A group containing all the read nodes.</returns>
        </member>
        <member name="M:iLab.Sbl.SblNode.WriteToStream(System.IO.Stream)">
            <summary>
            Writes this node to a stream.
            </summary>
            <param name="s">The stream to write to.</param>
        </member>
        <member name="M:iLab.Sbl.SblNode.Clone">
            <summary>
            Creates a clone of this SblNode.
            </summary>
            <returns>a clone of this SblNode</returns>
        </member>
        <member name="M:iLab.Sbl.SblNode.GetValue(System.String)">
            <summary>
            Gets the value of a subnode if this node is an SblGroup. If this is an SblValue or the item specified is an SblGroup a type
            cast exception will be thrown. If the specified node is not found a NullReferenceException will be thrown.
            </summary>
            <param name="name">The name of the node from which to retrieve a value.</param>
            <returns>A value if the specified name is unique to a single node which is an SblValue node.</returns>
        </member>
        <member name="M:iLab.Sbl.SblNode.GetValue(System.String,System.Boolean)">
            <summary>
            Gets the value of a subnode if this node is an SblGroup. If this is an SblValue or the item specified is an SblGroup a type
            cast exception will be thrown. If the specified node is not found a NullReferenceException will be thrown.
            </summary>
            <param name="name">The name of the node from which to retrieve a value.</param>
            <param name="ignoreCase">Whether or not to ignore the casing of the node name.</param>
            <returns>A value if the specified name is unique to a single node which is an SblValue node.</returns>
        </member>
        <member name="M:iLab.Sbl.SblNode.GetValue(System.String,System.Object)">
            <summary>
            Gets the value of a subnode if this node is an SblGroup. If this is an SblValue a type
            cast exception will be thrown. If the specified node is not found the default value is returned.
            </summary>
            <param name="name">The name of the node from which to retrieve a value.</param>
            <param name="defaultValue">The value returned if the specified value is not found.</param>
            <returns>A value if the specified name is unique to a single node which is an SblValue node.</returns>
        </member>
        <member name="M:iLab.Sbl.SblNode.GetValue(System.String,System.Object,System.Boolean)">
            <summary>
            Gets the value of a subnode if this node is an SblGroup. If this is an SblValue a type
            cast exception will be thrown. If the specified node is not found the default value is returned.
            </summary>
            <param name="name">The name of the node from which to retrieve a value.</param>
            <param name="defaultValue">The value returned if the specified value is not found.</param>
            <param name="ignoreCase">Whether or not to ignore the casing of the node name.</param>
            <returns>A value if the specified name is unique to a single node which is an SblValue node.</returns>
        </member>
        <member name="M:iLab.Sbl.SblNode.SetValue(System.String,System.Object)">
            <summary>
            Sets the value of a subnode if this node is an SblGroup. If this is an SblValue or the item specified is an SblGroup a type
            cast exception will be thrown. If there are multiple nodes with the specified name an exception will be thrown. If no
            node exists with the specified name, the node will be created.
            </summary>
            <param name="name">The name of the value to set.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:iLab.Sbl.SblNode.SetValue(System.String,System.Object,System.Boolean)">
            <summary>
            Sets the value of a subnode if this node is an SblGroup. If this is an SblValue or the item specified is an SblGroup a type
            cast exception will be thrown. If there are multiple nodes with the specified name an exception will be thrown. If no
            node exists with the specified name, the node will be created.
            </summary>
            <param name="name">The name of the value to set.</param>
            <param name="value">The value to set.</param>
            <param name="ignoreCase">Whether or not to ignore the casing of the node name.</param>
        </member>
        <member name="M:iLab.Sbl.SblNode.WriteBinary(System.IO.BinaryWriter)">
            <summary>
            Writes ths node to a BinaryWriter.
            </summary>
            <param name="binaryReader">Stream to write to.</param>
        </member>
        <member name="M:iLab.Sbl.SblNode.GetEnumerator">
            <summary>
            Gets an enumerator for this node.
            </summary>
            <returns>An IEnumerator.</returns>
        </member>
        <member name="M:iLab.Sbl.SblNode.System#Collections#IEnumerable#GetEnumerator">
            <summary>Gets an enumerator.</summary>
            <returns>an enumerator</returns>
        </member>
        <member name="P:iLab.Sbl.SblNode.Value">
            <summary>
            Gets the value of this node if it is a value node. If it is not a value node a type cast exception will be thrown.
            </summary>
        </member>
        <member name="P:iLab.Sbl.SblNode.Items">
            <summary>
            Gets the list of items in this node if this node is a group. If it is not a group a type cast exception will be thrown.
            </summary>
        </member>
        <member name="P:iLab.Sbl.SblNode.DataType">
            <summary>
            Gets the standard SBL data type this object represents. A loosely typed SblValue
            object with a null value will throw an exception.
            </summary>
        </member>
        <member name="P:iLab.Sbl.SblNode.Item(System.String)">
            <summary>
            Gets a subnode by name if this is a group. For a case-insensitive search use the GetValue method.
            </summary>
            <param name="name">The name of the node to search for.</param>
            <returns>Null if no matching node is found or if the match is ambiguous, otherwise an SblNode.</returns>
        </member>
        <member name="P:iLab.Sbl.SblNode.Item(System.Int32)">
            <summary>
            Gets a sub-node by index if this is a group node.
            </summary>
            <param name="index">The index of the node to get.</param>
            <returns>Am SblNode at the specified index.</returns>
        </member>
        <member name="T:iLab.Sbl.SblNodeEnumerator">
            <summary>Implements an enumerator for nodes.</summary>
        </member>
        <member name="M:iLab.Sbl.SblNodeEnumerator.#ctor(iLab.Sbl.SblNode)">
            <summary>Creates an SblNodeEnumerator.</summary>
            <param name="container">The node whose subnodes to enumerate.</param>
        </member>
        <member name="M:iLab.Sbl.SblNodeEnumerator.Dispose">
            <summary>Disposes of this object.</summary>
        </member>
        <member name="M:iLab.Sbl.SblNodeEnumerator.MoveNext">
            <summary>Selects the next object to be enumerated.</summary>
            <returns>the next object to be enumerated</returns>
        </member>
        <member name="M:iLab.Sbl.SblNodeEnumerator.Reset">
            <summary>Resets the enumerator to the beginning.</summary>
        </member>
        <member name="P:iLab.Sbl.SblNodeEnumerator.Current">
            <summary>Gets the current object in the enumeration.</summary>
        </member>
        <member name="T:iLab.Sbl.SblGroup">
            <summary>
            Represents a SBL node that contains other SBL nodes.
            </summary>
        </member>
        <member name="M:iLab.Sbl.SblGroup.GetSblNode(System.String,System.Boolean)">
            <summary>
            Gets a node by name. There must be a node with a unique name that matches the name
            parameter. If there are zero or more than one matching results no node will be returned.
            </summary>
            <param name="name">The name of the node to return.</param>
            <param name="ignoreCase">Whether or not to take text casing into account.</param>
            <returns>A node if there is one and only one node that matches the specified name, or null otherwise.</returns>
        </member>
        <member name="F:iLab.Sbl.SblGroup.Items">
            <summary>
            The collection of items within this group.
            </summary>
        </member>
        <member name="M:iLab.Sbl.SblGroup.#ctor">
            <summary>
            Creates an SblGroup.
            </summary>
        </member>
        <member name="M:iLab.Sbl.SblGroup.#ctor(System.String)">
            <summary>
            Creates an SblGroup.
            </summary>
            <param name="name">The name of this node.</param>
        </member>
        <member name="M:iLab.Sbl.SblGroup.#ctor(System.String,System.Collections.IEnumerable)">
            <summary>
            Creates and initializes an SblGroup.
            </summary>
            <param name="name">The name of the node.</param>
            <param name="subItems">An enumerable object that represents a list of subitems.</param>
        </member>
        <member name="M:iLab.Sbl.SblGroup.#ctor(System.String,System.Collections.Generic.IEnumerable{iLab.Sbl.SblNode})">
            <summary>
            Creates and initializes an SblGroup.
            </summary>
            <param name="name">The name of the node.</param>
            <param name="subItems">An enumerable object that represents a list of subitems.</param>
        </member>
        <member name="M:iLab.Sbl.SblGroup.WriteBinary(System.IO.BinaryWriter)">
            <summary>Serializes this node to a BinaryWriter.</summary>
            <param name="b">A BinaryWriter to write to.</param>
        </member>
        <member name="M:iLab.Sbl.SblGroup.ToString">
            <summary>
            Gets a string representation of this object.
            </summary>
            <returns>A string representation of this object.</returns>
        </member>
        <member name="M:iLab.Sbl.SblGroup.Clone">
            <summary>Creates a deep copy of this object.</summary>
            <returns>a deep copy of this object</returns>
        </member>
        <member name="P:iLab.Sbl.SblGroup.Item(System.String)">
            <summary>
            Gets a node by name. There must be a node with a unique name that matches the name
            parameter. If there are zero or more than one matching results no node will be returned.
            </summary>
            <param name="name">The name of the node to return.</param>
            <returns>A node if there is one and only one node that matches the specified name, or null otherwise.</returns>
        </member>
        <member name="P:iLab.Sbl.SblGroup.Item(System.Int32)">
            <summary>Indexer.</summary>
            <param name="i">Index.</param>
            <returns>The node with the specified index.</returns>
        </member>
        <member name="P:iLab.Sbl.SblGroup.DataType">
            <summary>
            Gets the standard SBL data type this object represents. A loosely typed SblValue
            object with a null value will throw an exception.
            </summary>
        </member>
        <member name="T:iLab.Sbl.SblValue">
            <summary>
            Represents an SBL node that contains a value.
            </summary>
        </member>
        <member name="M:iLab.Sbl.SblValue.MakeValue``1(System.String,``0)">
            <summary>
            Creates a strongly typed SblValue.
            </summary>
            <typeparam name="T">The type of the SblValue.</typeparam>
            <param name="name">The name of the node.</param>
            <param name="value">The node's value.</param>
            <returns>A strongly typed SblValue.</returns>
        </member>
        <member name="M:iLab.Sbl.SblValue.MakeValue(System.String,System.Object)">
            <summary>
            Creates a loosely typed SblValue.
            </summary>
            <param name="name">The name of the node.</param>
            <param name="value">The node's value.</param>
            <returns></returns>
        </member>
        <member name="M:iLab.Sbl.SblValue.WriteBinary(System.IO.BinaryWriter)">
            <summary>Serializes this object to a BinaryWriter.</summary>
            <param name="b">The BinaryWriter to serialize to.</param>
        </member>
        <member name="M:iLab.Sbl.SblValue.ToString">
            <summary>
            Gets a string representation of this object.
            </summary>
            <returns>A string representation of this object.</returns>
        </member>
        <member name="P:iLab.Sbl.SblValue.Value">
            <summary>
            Gets/sets the value of this node.
            </summary>
        </member>
        <member name="P:iLab.Sbl.SblValue.DataType">
            <summary>
            Gets the standard SBL data type this object represents. A loosely typed SblValue
            object with a null value will throw an exception.
            </summary>
        </member>
        <member name="T:iLab.Sbl.StrongSblValue`1">
            <summary>
            An SblValue class that implements generics to be strongly typed.
            </summary>
            <remarks>This class can be more memory efficient and may offer better performance, but at
            the cost of static typing.</remarks>
            <typeparam name="T">The type that this value must have.</typeparam>
        </member>
        <member name="M:iLab.Sbl.StrongSblValue`1.#ctor">
            <summary>
            Creates a typeSblValue
            </summary>
        </member>
        <member name="M:iLab.Sbl.StrongSblValue`1.#ctor(System.String,`0)">
            <summary>
            Creates and initialized a typeSbleValue.
            </summary>
            <param name="name">This node's name.</param>
            <param name="value">This node's value.</param>
        </member>
        <member name="M:iLab.Sbl.StrongSblValue`1.Clone">
            <summary>Creates a copy of this SBL Node.</summary>
            <returns></returns>
        </member>
        <member name="P:iLab.Sbl.StrongSblValue`1.Value">
            <summary>
            Gets/sets the value of this node.
            </summary>
        </member>
        <member name="P:iLab.Sbl.StrongSblValue`1.TypedValue">
            <summary>
            Gets/sets this SblNode's value with a strongly typed accessor.
            </summary>
        </member>
        <member name="T:iLab.Sbl.WeakSblValue">
            <summary>
            An Sbl Value class that is loosely typed.
            </summary>
            <remarks>This class is flexible but does not offer strict typing, often
            requiring boxing and casting to be used.</remarks>
        </member>
        <member name="M:iLab.Sbl.WeakSblValue.#ctor">
            <summary>
            Creates an SblObjectValue.
            </summary>
        </member>
        <member name="M:iLab.Sbl.WeakSblValue.#ctor(System.String,System.Object)">
            <summary>
            Creates and initalizes an SblObjectValue.
            </summary>
            <param name="name">The name of this node.</param>
            <param name="value">This node's value.</param>
        </member>
        <member name="M:iLab.Sbl.WeakSblValue.Clone">
            <summary>Creates an clone of this node.</summary>
            <returns>An SBL Node.</returns>
        </member>
        <member name="P:iLab.Sbl.WeakSblValue.Value">
            <summary>
            Gets/sets the value of this node.
            </summary>
        </member>
        <member name="T:iLab.Sbl.DataType">
            <summary>
            Represents the types allowable in SBL data.
            </summary>
        </member>
        <member name="F:iLab.Sbl.DataType.Group">
            <summary>A node that contains subnodes.</summary>
        </member>
        <member name="F:iLab.Sbl.DataType.Int32">
            <summary>A node that contains a 32-bit signed integer.</summary>
        </member>
        <member name="F:iLab.Sbl.DataType.Int64">
            <summary>A node that contains a 64-bit signed integer.</summary>
        </member>
        <member name="F:iLab.Sbl.DataType.Int8">
            <summary>A node that contains an 8-bit unsigned integer.</summary>
        </member>
        <member name="F:iLab.Sbl.DataType.Float">
            <summary>A node that contains a floating-point number.</summary>
        </member>
        <member name="F:iLab.Sbl.DataType.Binary">
            <summary>A node that contains a block of raw binary data.</summary>
        </member>
        <member name="F:iLab.Sbl.DataType.Char">
            <summary>A node that contains a single character.</summary>
        </member>
        <member name="F:iLab.Sbl.DataType.String">
            <summary>A node that contains a string of text.</summary>
        </member>
        <member name="F:iLab.Sbl.DataType.Date">
            <summary>A node that contains a UTC date.</summary>
        </member>
        <member name="T:Editroid.ScreenGrid">
            <summary>Provides a grid of screen editors with an incorperated map navigator to allow editing of multiple adjacent map locations.</summary>
        </member>
        <member name="F:Editroid.ScreenGrid.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Editroid.ScreenGrid.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Editroid.ScreenGrid.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Editroid.ScreenGrid.#ctor">
            <summary>
            Creates a ScreenGrid control.
            </summary>
        </member>
        <member name="M:Editroid.ScreenGrid.RedrawAllScreens">
            <summary>
            Redraws all screens.
            </summary>
        </member>
        <member name="M:Editroid.ScreenGrid.RedrawAllInstances(Editroid.Levels,System.Int32)">
            <summary>Redraws any ScreenControl that is displaying the specified screen.</summary>
            <param name="level">The level the screen belongs to.</param>
            <param name="screenIndex">The index of the screen, or -1 to specify any screen in the specified level.</param>
        </member>
        <member name="M:Editroid.ScreenGrid.ReloadLevel(Editroid.Levels)">
            <summary>
            Reloads data for the specified level.
            </summary>
            <param name="level">The level to load data for.</param>
        </member>
        <member name="M:Editroid.ScreenGrid.SetSize(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the size of the screen grid.
            </summary>
            <param name="width">The width of the grid in screens.</param>
            <param name="height">The height of the grid in screens.</param>
            <param name="mapX">The location of the map editor.</param>
            <param name="mapY">The location of the map editor.</param>
        </member>
        <member name="M:Editroid.ScreenGrid.OnSelectedScreenChanged">
            <summary>
            Raises the SelectedScreenChanged event.
            </summary>
        </member>
        <member name="M:Editroid.ScreenGrid.OnSelectedObjectChanged">
            <summary>
            Raises the SelectedObjectChanged event.
            </summary>
        </member>
        <member name="M:Editroid.ScreenGrid.OnSelectedObjectDragged">
            <summary>
            Raises the SelectedObjectDragged event.
            </summary>
        </member>
        <member name="M:Editroid.ScreenGrid.Display(System.Int32,System.Int32)">
            <summary>
            Moves the display location by specifying the map coordinates of the upper-left window in the viewport.
            </summary>
        </member>
        <member name="P:Editroid.ScreenGrid.Screens">
            <summary>
            Gets a collection of screen editors used in this control.
            </summary>
        </member>
        <member name="E:Editroid.ScreenGrid.SelectedScreenChanged">
            <summary>Occurs when the active screen editor changes.</summary>
        </member>
        <member name="E:Editroid.ScreenGrid.SelectedObjectChanged">
            <summary>Occurs when an object is selected in any screen editor.</summary>
        </member>
        <member name="E:Editroid.ScreenGrid.SelectedObjectDragged">
            <summary>Occurs when an object is dragged within a screen editor.</summary>
        </member>
        <member name="P:Editroid.ScreenGrid.UseAlternatePalette">
            <summary>
            Gets/sets whether screens will be displayed using alternate palettes.
            </summary>
        </member>
        <member name="P:Editroid.ScreenGrid.SelectedScreen">
            <summary>
            Gets the currently active screen editor.
            </summary>
        </member>
        <member name="P:Editroid.ScreenGrid.MapEditor">
            <summary>
            Gets the map navigation control hosted in this ScreenGrid.
            </summary>
        </member>
        <member name="P:Editroid.ScreenGrid.Rom">
            <summary>
            Gets/sets the ROM data will be read from.
            </summary>
        </member>
        <member name="M:Editroid.IpsRecord.#ctor(System.IO.Stream)">
            <summary>
            Creates an IPS record.
            </summary>
            <param name="s">A stream that contains an IPS record.</param>
        </member>
        <member name="M:Editroid.IpsRecord.#ctor(System.Byte[],System.Int32)">
            <summary>
            Creates an IPS record.
            </summary>
            <param name="data">The patch data.</param>
            <param name="offset">The offset the data is applied to.</param>
        </member>
        <member name="M:Editroid.IpsRecord.#ctor(System.Byte,System.Int32,System.Int32)">
            <summary>
            Creates an RLE encoded IPS record.
            </summary>
            <param name="data">The byte value that will be repeated.</param>
            <param name="offset">The offset the data is applied to.</param>
            <param name="rleLength">The number of times the byte is repeated.</param>
        </member>
        <member name="T:Editroid.Screen">
            <summary>
            Provides access to screen-specific data
            </summary>
        </member>
        <member name="M:Editroid.Screen.#ctor(System.Byte[],Editroid.MetroidHandle)">
            <summary>
            Creates a Screen object.
            </summary>
            <param name="data">ROM data</param>
            <param name="handle">A metroid handle pointing to the data.</param>
        </member>
        <member name="M:Editroid.Screen.InvalidateScreenObjects">
             <summary>
             Discards the cached list of ScreenObjects. 
             </summary>
             <remarks>This should be done when the number
             or memory location of the screen object data changes. This does not need 
             to be done when a screen object is merely modified because the 
             actual data is not cached, only a reference to the data is chached.
            </remarks>
        </member>
        <member name="M:Editroid.Screen.GetIndex(Editroid.ScreenItem)">
            <summary>
            Gets the index of a screen item.
            </summary>
            <param name="i">The item to find the index of.</param>
            <returns>The index of the specified item, or -1 if the item is not found.</returns>
        </member>
        <member name="M:Editroid.Screen.GetIndex(Editroid.ScreenEnemy)">
            <summary>
            Gets the index of a screen item.
            </summary>
            <param name="e">The item to find the index of.</param>
            <returns>The index of the specified item, or -1 if the item is not found.</returns>
        </member>
        <member name="M:Editroid.Screen.LoadEnemyData">
            <summary>
            Loads all objects in the enemy data section. This includes doors, enemies, tourain access bridge, and possible other unknown data.
            </summary>
        </member>
        <member name="M:Editroid.Screen.InvalidateScreenDoors">
             <summary>
             Discards the cached list of ScreenDoors. 
             </summary>
             <remarks>This should be done when the number
             or memory location of the screen door data changes. This does not need 
             to be done when a screen door is merely modified because the 
             actual data is not cached, only a reference to the data is chached.
            </remarks>
        </member>
        <member name="M:Editroid.Screen.InvalidateScreenEnemies">
             <summary>
             Discards the cached list of ScreenEnemies. 
             </summary>
             <remarks>This should be done when the number
             or memory location of the screen enemy data changes. This does not need 
             to be done when a screen enemy is merely modified because the 
             actual data is not cached, only a reference to the data is chached.
            </remarks>
        </member>
        <member name="P:Editroid.Screen.EnemyDataOffset">
            <summary>
            Gets the offset of enemy data (including door data). If there is
            no enemy or door data, the return value will be the offset of the
            first byte after this screen's data.
            </summary>
        </member>
        <member name="P:Editroid.Screen.HasEnemyData">
            <summary>
            Gets a boolean value indicating whether the screen has a data
            segment for enemy data (identified by the hexadecimal value FD).
            </summary>
        </member>
        <member name="P:Editroid.Screen.Offset">
            <summary>
            Gets the offset of this object in ROM data.
            </summary>
        </member>
        <member name="P:Editroid.Screen.ColorAttributeTable">
            <summary>
            Gets the ColorAttributeTable entry for this screen
            </summary>
        </member>
        <member name="P:Editroid.Screen.ScreenHandle">
            <summary>Gets a handle that refers to this screen's
            entry in the level's pointer table.</summary>
        </member>
        <member name="P:Editroid.Screen.Objects">
            <summary>
            Gets an array of ScreenObjects that this screen is composed of.
            </summary>
            <remarks>This property is cached.</remarks>
        </member>
        <member name="P:Editroid.Screen.Doors">
            <summary>
            Gets an array of ScreenDoor objects that represents the doors of this room.
            </summary>
        </member>
        <member name="P:Editroid.Screen.HasBridge">
            <summary>
            Gets whether this screen has an access bridge (a bridge appears if
            both bosses have been beaten).
            </summary>
        </member>
        <member name="P:Editroid.Screen.Enemies">
            <summary>
            Gets an array of ScreenEnemy objects that represents the enemies in this room.
            </summary>
        </member>
        <member name="T:Editroid.MapMaker">
            <summary>
            Creates a map 
            </summary>
        </member>
        <member name="M:Editroid.MapMaker.levelAt(System.Int32,System.Int32)">
            <summary>For use exclusively by GuessLevel as a safe
            way to check the level at a map position.</summary>
        </member>
        <member name="E:Editroid.MapMaker.RoomDrawn">
            <summary>
            Raised each time a room is drawn to the map. This event will also be
            raised when the renderer skips over a blank room.
            </summary>
        </member>
        <member name="T:Editroid.Graphic.ItemSprites">
            <summary>
            Sprites used for power-ups.
            </summary>
        </member>
        <member name="F:Editroid.Graphic.ItemSprites.Elevator">
            <summary>Sprite for elevators.</summary>
        </member>
        <member name="F:Editroid.Graphic.ItemSprites.PalSwitch">
            <summary>Sprite for a palette switch.</summary>
        </member>
        <member name="T:Editroid.Graphic.PowerUpSprites">
            <summary>
            Defines sprites for power-ups.
            </summary>
        </member>
        <member name="F:Editroid.Graphic.PowerUpSprites.Bombs">
            <summary>Sprite for the bombs.</summary>
        </member>
        <member name="F:Editroid.Graphic.PowerUpSprites.HighJump">
            <summary>Sprite for high jump boots.</summary>
        </member>
        <member name="F:Editroid.Graphic.PowerUpSprites.LongBeam">
            <summary>Sprite for the longbeam.</summary>
        </member>
        <member name="F:Editroid.Graphic.PowerUpSprites.ScrewAttack">
            <summary>Sprite for the screw attack.</summary>
        </member>
        <member name="F:Editroid.Graphic.PowerUpSprites.MaruMari">
            <summary>Sprite for the maru mari.</summary>
        </member>
        <member name="F:Editroid.Graphic.PowerUpSprites.Varia">
            <summary>Sprite for the varia suit.</summary>
        </member>
        <member name="F:Editroid.Graphic.PowerUpSprites.WaveBeam">
            <summary>Sprite for the wavebeam.</summary>
        </member>
        <member name="F:Editroid.Graphic.PowerUpSprites.IceBeam">
            <summary>Sprite for the icebeam.</summary>
        </member>
        <member name="F:Editroid.Graphic.PowerUpSprites.EnergyTank">
            <summary>Sprite for an energy tank.</summary>
        </member>
        <member name="F:Editroid.Graphic.PowerUpSprites.Missile">
            <summary>Sprite for missiles.</summary>
        </member>
        <member name="F:Editroid.Graphic.PowerUpSprites.MissileDot">
            <summary>Sprite for dot missiles.</summary>
        </member>
        <member name="F:Editroid.Graphic.PowerUpSprites.MissileArrow">
            <summary>Sprite for arrow missiles.</summary>
        </member>
        <member name="F:Editroid.Graphic.PowerUpSprites.UnknownC">
            <summary>Sprite for unknow object.</summary>
        </member>
        <member name="F:Editroid.Graphic.PowerUpSprites.UnknownD">
            <summary>Sprite for unknow object.</summary>
        </member>
        <member name="F:Editroid.Graphic.PowerUpSprites.UnknownE">
            <summary>Sprite for unknow object.</summary>
        </member>
        <member name="F:Editroid.Graphic.PowerUpSprites.UnknownF">
            <summary>Sprite for unknow object.</summary>
        </member>
        <member name="M:Editroid.Graphic.PowerUpSprites.GetSprite(Editroid.ROM.PowerUpType)">
            <summary>
            Gets the sprite for the specified power-up.
            </summary>
            <param name="powerup">The type of power-up to get a sprite for.</param>
            <returns>A Sprite object.</returns>
        </member>
        <member name="T:Editroid.LevelEventArgs">
            <summary>Provides information for an event pertaining to a level.</summary>
        </member>
        <member name="M:Editroid.LevelEventArgs.#ctor(Editroid.Levels)">
            <summary>Instantiates this class.</summary>
        </member>
        <member name="P:Editroid.LevelEventArgs.Level">
            <summary>The level for which the event occurred.</summary>
        </member>
        <member name="T:Editroid.ComboEventArgs">
            <summary>Provides information for an event pertaining to a combo.</summary>
        </member>
        <member name="M:Editroid.ComboEventArgs.#ctor(Editroid.Levels,System.Int32)">
            <summary>Instantiates this class.</summary>
        </member>
        <member name="P:Editroid.ComboEventArgs.ComboIndex">
            <summary>The index of the combo for which this event occurred.</summary>
        </member>
        <member name="T:Editroid.ScreenObjectEventArgs">
            <summary>Provides information for an event pertaining to a screen object.</summary>
        </member>
        <member name="M:Editroid.ScreenObjectEventArgs.#ctor(Editroid.Levels,Editroid.ScreenItem)">
            <summary></summary>
            <param name="level"></param>
            <param name="item"></param>
        </member>
        <member name="P:Editroid.ScreenObjectEventArgs.Item">
            <summary>The item this event pertains to.</summary>
        </member>
        <member name="F:Editroid.frmPassword.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Editroid.frmPassword.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Editroid.frmPassword.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Editroid.LevelPointers">
            <summary>
            Contains the offsets of pointer tables for the five different levels
            </summary>
        </member>
        <member name="F:Editroid.LevelPointers.rooms">
            <summary>
            Location of this levels room data pointer table
            </summary>
        </member>
        <member name="F:Editroid.LevelPointers.structs">
            <summary>
            Location of this levels struct data pointer table
            </summary>
        </member>
        <member name="F:Editroid.LevelPointers.Brinstar">
            <summary>
            Level pointers for Brinstar
            </summary>
        </member>
        <member name="F:Editroid.LevelPointers.Norfair">
            <summary>
            Level pointers for Norfair
            </summary>
        </member>
        <member name="F:Editroid.LevelPointers.Tourain">
            <summary>
            Level pointers for Tourain
            </summary>
        </member>
        <member name="F:Editroid.LevelPointers.Kraid">
            <summary>
            Level pointers for Kraid's Hideout
            </summary>
        </member>
        <member name="F:Editroid.LevelPointers.Ridley">
            <summary>
            Level pointers for Ridley's Hideout
            </summary>
        </member>
        <member name="M:Editroid.LevelPointers.GetPointers(Editroid.Levels)">
            <summary>
            Returns the offsets of the pointer tables for the specified level
            </summary>
            <param name="level">The level to obtain offsets for</param>
            <returns>the offsets of the pointer tables for the specified level</returns>
        </member>
        <member name="P:Editroid.LevelPointers.Rooms">
            <summary>
            Gets the pointer table for rooms in this level.
            </summary>
        </member>
        <member name="P:Editroid.LevelPointers.Structs">
            <summary>
            Gets the pointer table for structs in this level.
            </summary>
        </member>
        <member name="T:Editroid.PalTableEditor">
            <summary>
            Control to edit a four-color palette table
            </summary>
        </member>
        <member name="F:Editroid.PalTableEditor.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Editroid.PalTableEditor.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Editroid.PalTableEditor.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Editroid.PalTableEditor.GetEntry(System.Int32)">
            <summary>
            Returns the palette entry at the given index, or zero if no ROM image is specified for this control.
            </summary>
            <param name="index">The index of the entry</param>
            <returns>The value of the entry</returns>
        </member>
        <member name="M:Editroid.PalTableEditor.SetEntry(System.Int32,System.Int32)">
            <summary>
            Sets the palette entry at the given index.
            </summary>
            <param name="index">Index of the entry.</param>
            <param name="entry">New value of the entry.</param>
            <remarks>This function will fail of no ROM image is provided to the Data property, but no exception will be raised.</remarks>
        </member>
        <member name="M:Editroid.PalTableEditor.#ctor">
            <summary>
            Instantiates this control.
            </summary>
        </member>
        <member name="P:Editroid.PalTableEditor.Palette">
            <summary>
            Gets/sets the palette to be used for this palette editor.
            </summary>
            <remarks>This value defaults to the normal NES color palette. This may be changed
            to reflect de-emphasized NES color, but any modifications to this palette
            will not be reflected in the color selector at the bottom.</remarks>
        </member>
        <member name="P:Editroid.PalTableEditor.Data">
            <summary>
            Gets/sets the ROM image data to edit.
            </summary>
        </member>
        <member name="P:Editroid.PalTableEditor.Offset">
            <summary>
            Gets/sets the offset of the palette data to edit.
            </summary>
        </member>
        <member name="E:Editroid.PalTableEditor.PaletteEntrySelected">
            <summary>
            Raised when the user selectes a palette entry to modify.
            </summary>
        </member>
        <member name="T:Editroid.PalTableEditor.PaletteSelectionEvent">
            <summary>
            Defines the event handler for a palette entry selection.
            </summary>
            <param name="sender">The control that raises the exception.</param>
            <param name="e">Data about the selection.</param>
        </member>
        <member name="T:Editroid.PaletteEditor">
            <summary>
            
            </summary>
        </member>
        <member name="F:Editroid.PaletteEditor.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Editroid.PaletteEditor.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Editroid.PaletteEditor.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Editroid.PaletteEditor.#ctor">
            <summary>
            Instantiates this control.
            </summary>
        </member>
        <member name="P:Editroid.PaletteEditor.Data">
            <summary>
            Gets/sets the ROM image data to edit.
            </summary>
        </member>
        <member name="P:Editroid.PaletteEditor.Offset">
            <summary>
            Gets/sets the base offset of palette data.
            </summary>
        </member>
        <member name="E:Editroid.PaletteEditor.EntrySelected">
            <summary>
            Raised when an entry is selected to be edited.
            </summary>
        </member>
        <member name="T:Editroid.Physics">
            <summary>
            Represents the physics that are associated with a graphic tile.
            </summary>
        </member>
        <member name="F:Editroid.Physics.Solid">
            <summary>An impassable tile.</summary>
        </member>
        <member name="F:Editroid.Physics.Air">
            <summary>An intangible tile.</summary>
        </member>
        <member name="F:Editroid.Physics.Breakable">
            <summary>A tile that can be destroyed.</summary>
        </member>
        <member name="F:Editroid.Physics.Door">
            <summary>A tile that acts as a door marker.</summary>
        </member>
        <member name="F:Editroid.Physics.DoorHorizontal">
            <summary>A tile that acts as a door marker from one adjacent horizontal room to another.</summary>
        </member>
        <member name="M:Editroid.ComboEditor.Draw">
            <summary>
            Draws the combos in the editor.
            </summary>
        </member>
        <member name="M:Editroid.ComboEditor.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Overrides base member.
            </summary>
            <param name="e">e argument.</param>
        </member>
        <member name="M:Editroid.ComboEditor.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Overrides base member.
            </summary>
            <param name="e">e argument.</param>
        </member>
        <member name="M:Editroid.ComboEditor.ProcessMouse(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Processes mouse events for combo editing.
            </summary>
            <param name="e">Mouse event args for a mouse event.</param>
        </member>
        <member name="M:Editroid.ComboEditor.DrawCombo(System.Int32,System.Int32)">
            <summary>
            Draws a combo in the editor.
            </summary>
            <remarks>This function does not refresh the control.</remarks>
        </member>
        <member name="F:Editroid.ComboEditor.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Editroid.ComboEditor.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Editroid.ComboEditor.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:Editroid.ComboEditor.CurrentTile">
            <summary>
            Gets/sets the tile that will be painted when the user clicks on a combo.
            </summary>
        </member>
        <member name="T:Editroid.PaletteSelectionInfo">
            <summary>
            Contains data about a palette selection for the palette editor controls.
            </summary>
        </member>
        <member name="M:Editroid.PaletteSelectionInfo.Deselect">
            <summary>
            Deselects the palette entry this object refers to.
            </summary>
        </member>
        <member name="P:Editroid.PaletteSelectionInfo.Control">
            <summary>
            The control that represents the entry this object refers to.
            </summary>
        </member>
        <member name="P:Editroid.PaletteSelectionInfo.Host">
            <summary>
            The PalTableEditor that contians the entry this object refers to.
            </summary>
        </member>
        <member name="P:Editroid.PaletteSelectionInfo.EntryIndex">
            <summary>
            The index within a palette table of the entry this object refers to.
            </summary>
        </member>
        <member name="P:Editroid.PaletteSelectionInfo.EntryValue">
            <summary>
            Gets or sets the value of the entry this object refers to.
            </summary>
        </member>
        <member name="P:Editroid.PaletteSelectionInfo.AddToSelection">
            <summary>
            If true, this entry should be added to the current selection.
            If false, this entry should replace the entire selection.
            </summary>
        </member>
        <member name="F:Editroid.ItemEditor.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Editroid.ItemEditor.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Editroid.ItemEditor.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Editroid.ItemEditor.GetPasswordEntry">
            <summary>
            Finds the password data entry that corresponds to the selected item, if there is one.
            </summary>
        </member>
        <member name="M:Editroid.ItemEditor.EnemyIndexToListIndex(System.Int32)">
            <summary>Returns the list index that corresponds to an enemy value</summary>
        </member>
        <member name="M:Editroid.ItemEditor.ListIndexToEnemyIndex(System.Int32)">
            <summary>Returns the enemy value that corresponds to a list index</summary>
        </member>
        <member name="M:Editroid.ItemEditor.GetEditorIndex(System.Int32)">
            <summary>
            Converts an elevator destination to an ItemEditor index.
            </summary>
            <param name="dest">The elevator destination numerical value.</param>
            <returns>An integer representing a list item.</returns>
        </member>
        <member name="M:Editroid.ItemEditor.GetDestinationIndex(System.Int32)">
            <summary>
            Converts an ItemEditor index into an ElevatorDestination equivalent integer value.
            </summary>
            <param name="index">Index.</param>
            <returns>Integer representation of an ElevatorDestination.</returns>
        </member>
        <member name="M:Editroid.frmHelp.ConstructVersionString">
            <summary>After the feedback agent has run, this method constructs a string to explain to the user what information is
            available about the newest version of Editroid.</summary>
        </member>
        <member name="F:Editroid.frmHelp.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Editroid.frmHelp.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Editroid.frmHelp.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Editroid.FeederBacker.responseResult">
            <summary>
            Gets the response from the server after feedback.
            </summary>
        </member>
        <member name="M:Editroid.FeederBacker.CreatePost">
            <summary>Creates POST data and stores it in postBuffer.</summary>
        </member>
        <member name="M:Editroid.FeederBacker.unCreatePost">
            <summary>Frees memory used by postBuffer.</summary>
        </member>
        <member name="P:Editroid.FeederBacker.FeedbackUrl">
            <summary>
            Gets/sets the URL for the feedback server.
            </summary>
        </member>
        <member name="P:Editroid.FeederBacker.RequestReply">
            <summary>
            Gets/sets whether the user submitting feedback has requested a
            follow-up e-mail.
            </summary>
        </member>
        <member name="T:Editroid.MapControl">
            <summary>
            Allows a user to navigate and edit the map of the world.
            </summary>
        </member>
        <member name="M:Editroid.MapControl.#ctor">
            <summary>
            Instantiates this control.
            </summary>
        </member>
        <member name="M:Editroid.MapControl.GetDoors(System.Int32,System.Int32)">
            <summary>
            Gets door data for a specified map position.
            </summary>
            <param name="x">X-coordinate on the map.</param>
            <param name="y">Y-coordinate on the map.</param>
            <returns>MapRoom value indicating which doors are present.</returns>
            <remarks>This function gets data that is displayed, which does not necessarily
            accurately reflect the doors in the game.</remarks>
        </member>
        <member name="M:Editroid.MapControl.GetLevel">
            <summary>
            Gets level data for the currently selected map position.
            </summary>
            <returns>A Levels value.</returns>
        </member>
        <member name="M:Editroid.MapControl.SetSelection(System.Int32,System.Int32)">
            <summary>
            Moves the map selection to the specified coordinates.
            </summary>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
        </member>
        <member name="M:Editroid.MapControl.GetLevel(System.Int32,System.Int32)">
            <summary>
            Gets level data for a specified map position.
            </summary>
            <param name="x">X-coordinate of a screen.</param>
            <param name="y">Y-coordinate of a screen.</param>
            <returns>A Levels value.</returns>
            <remarks>This function gets data that is displayed and does not
            necessarily accurately reflect the game world.</remarks>
        </member>
        <member name="M:Editroid.MapControl.GetRoom(System.Int32,System.Int32)">
            <summary>
            Gets map data.
            </summary>
            <param name="x">X-coordinate of a screen.</param>
            <param name="y">Y-coordinate of a screen.</param>
            <returns>A MapRoom value describing a map position.</returns>
            <remarks>This function gets data that is displayed and does not
            necessarily accurately reflect the game world.</remarks>
        </member>
        <member name="F:Editroid.MapControl.loading">
            <summary>
            Indicates whether the control is currently loading data, so that
            events that should not occur at this time will be surpressed.
            </summary>
        </member>
        <member name="M:Editroid.MapControl.TryLoadData(System.IO.Stream)">
            <summary>
            Loads a map from a stream.
            </summary>
            <param name="s">Stream containing map data.</param>
        </member>
        <member name="M:Editroid.MapControl.TryLoadData(System.IO.Stream,System.Boolean)">
            <summary>
            Loads a map from a stream.
            </summary>
            <param name="s">Stream containing map data.</param>
            <param name="hasHeader"></param>
            <returns>A boolean value that indicates success or failure.</returns>
        </member>
        <member name="M:Editroid.MapControl.LoadData(System.String)">
            <summary>
            Loads a map from a file.
            </summary>
            <param name="filename">Name of file containing map data.</param>
        </member>
        <member name="M:Editroid.MapControl.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Overrides base member.
            </summary>
            <param name="e">e parameter.</param>
        </member>
        <member name="M:Editroid.MapControl.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Overrides base member.
            </summary>
            <param name="e">e parameter.</param>
        </member>
        <member name="M:Editroid.MapControl.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Overrides base member.
            </summary>
            <param name="e">e parameter.</param>
        </member>
        <member name="F:Editroid.MapControl.MagicValue">
            <summary>Binary data marker to identify map data.</summary>
        </member>
        <member name="M:Editroid.MapControl.SaveData(System.IO.Stream)">
            <summary>
            Saves map to a stream.
            </summary>
            <param name="s">Stream to write data to.</param>
        </member>
        <member name="M:Editroid.MapControl.SaveData(System.String)">
            <summary>
            Saves map to a file.
            </summary>
            <param name="filename">Filename.</param>
        </member>
        <member name="M:Editroid.MapControl.SetImage(System.Int32,System.Int32,Editroid.MapRoom)">
            <summary>
            Sets the image to be used at a specified map position.
            </summary>
            <param name="x">Coordinate of screen.</param>
            <param name="y">Coordinate of screen.</param>
            <param name="image">Image to display.</param>
        </member>
        <member name="M:Editroid.MapControl.SetDoor(System.Int32,System.Int32,Editroid.MapRoom)">
            <summary>
            Displays the specified doors on the specified room in the map
            </summary>
            <param name="X">The X-coordinate of the room</param>
            <param name="Y">The Y-coordinate of the room</param>
            <param name="doors">The door data to apply</param>
        </member>
        <member name="P:Editroid.MapControl.SelectionSize">
            <summary>
            Gets/sets the size of the map selection.
            </summary>
        </member>
        <member name="P:Editroid.MapControl.SelectionX">
            <summary>
            Gets/sets the X-coordinate of the selected screen.
            </summary>
        </member>
        <member name="P:Editroid.MapControl.SelectionY">
            <summary>
            Gets/sets the Y-coordinate of the selected screen.
            </summary>
        </member>
        <member name="E:Editroid.MapControl.selectedRoomModified">
            <summary>Raised when the selected room is modified.</summary>
        </member>
        <member name="P:Editroid.MapControl.Image">
            <summary>
            Hides the Image property.
            </summary>
        </member>
        <member name="E:Editroid.MapControl.SelectionChanged">
            <summary>
            Occurs when a room is selected.
            </summary>
        </member>
        <member name="E:Editroid.MapControl.RoomCleared">
            <summary>
            Occurs when a room is cleared.
            </summary>
        </member>
        <member name="E:Editroid.MapControl.RoomSet">
            <summary>
            Occurs when a room is changed.
            </summary>
        </member>
        <member name="E:Editroid.MapControl.TileChanged">
            <summary>
            Occurs when a map tile is changed.
            </summary>
        </member>
        <member name="P:Editroid.MapControl.MapImage">
            <summary>
            Gets the image currently being used for the map.
            </summary>
        </member>
        <member name="P:Editroid.MapControl.Rom">
            <summary>
            Gets/sets the ROM.
            </summary>
        </member>
        <member name="T:Editroid.MapControl.CoordEvent">
            <summary>
            Represents an event with coordinate data.
            </summary>
            <param name="sender">Object that raises the event.</param>
            <param name="X">X coordinate.</param>
            <param name="Y">Y coordinate.</param>
        </member>
        <member name="T:Editroid.MapRoom">
            <summary>
            Enumerates values that can be combined to specifiy the image to use
            for a screen on a map.
            </summary>
        </member>
        <member name="F:Editroid.MapRoom.Brinstar">
            <summary>Screen is in Brinstar.</summary>
        </member>
        <member name="F:Editroid.MapRoom.Norfair">
            <summary>Screen is in Norfair.</summary>
        </member>
        <member name="F:Editroid.MapRoom.Tourain">
            <summary>Screen is in Tourain.</summary>
        </member>
        <member name="F:Editroid.MapRoom.Kraid">
            <summary>Screen is in Kraid's hideout.</summary>
        </member>
        <member name="F:Editroid.MapRoom.Blank">
            <summary>Screen is blank.</summary>
        </member>
        <member name="F:Editroid.MapRoom.Ridley">
            <summary>Screen is in Ridley's hideout.</summary>
        </member>
        <member name="F:Editroid.MapRoom.LeftDoor">
            <summary>Screen has a door on the left side.</summary>
        </member>
        <member name="F:Editroid.MapRoom.RightDoor">
            <summary>Screen has a door on the right side.</summary>
        </member>
        <member name="F:Editroid.frmMapStatus.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Editroid.frmMapStatus.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Editroid.frmMapStatus.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Editroid.frmMap.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Editroid.frmMap.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Editroid.frmMap.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Editroid.PointerTable">
            <summary>
            Identifies the location within a ROM of a pointer table
            </summary>
        </member>
        <member name="F:Editroid.PointerTable.Offset">
            <summary>
            The offset of the beginning of the pointer table
            </summary>
        </member>
        <member name="F:Editroid.PointerTable.Length">
            <summary>
            The number of entries in the pointer table
            </summary>
        </member>
        <member name="M:Editroid.PointerTable.GetPointer(System.Int32,System.Byte[])">
            <summary>
            Pulls a Metroid pointer out of this pointer table in the specified ROM data
            </summary>
            <param name="index">The index of the entry</param>
            <param name="data">The ROM data to access</param>
            <returns>a Metroid pointer</returns>
        </member>
        <member name="T:Editroid.ComboTable">
            <summary>
            Represents a table of combos from which structs are made of.
            </summary>
        </member>
        <member name="M:Editroid.ComboTable.#ctor(System.Byte[],System.Int32)">
            <summary>
            Creates a ComboTable based on the specified ROM data
            </summary>
            <param name="data">ROM image</param>
            <param name="offset">location of data</param>
        </member>
        <member name="P:Editroid.ComboTable.Offset">
            <summary>
            Gets the offset of this object in ROM data.
            </summary>
        </member>
        <member name="P:Editroid.ComboTable.Item(System.Int32)">
            <summary>
            Gets a reference to the specified combo definition.
            </summary>
            <param name="i">Index of a combo.</param>
            <returns>A reference to the specified combo defintion.</returns>
        </member>
        <member name="T:Editroid.Combo">
            <summary>
            Provides access to combo data
            </summary>
        </member>
        <member name="M:Editroid.Combo.#ctor(System.Byte[],System.Int32)">
            <summary>
            Creates a Combo object based on ROM data
            </summary>
            <param name="data">ROM image</param>
            <param name="offset">location of data</param>
        </member>
        <member name="M:Editroid.Combo.GetByte(System.Int32)">
            <summary>
            Loads a combo tile index. This function performs no safety checks.
            </summary>
            <param name="index">The tile index. Should be 0, 1, 2, or 3.</param>
            <returns>A combo tile index</returns>
        </member>
        <member name="M:Editroid.Combo.SetByte(System.Int32,System.Byte)">
            <summary>
            Sets a combo tile index. This function performs no saftey checks.
            </summary>
            <param name="index">The tileindex. Should be 0, 1, 2, or 3.</param>
            <param name="value">The new combo tile index.</param>
        </member>
        <member name="M:Editroid.Combo.GetComboOffset(Editroid.Levels)">
            <summary>
            Gets the combo offset of a specified level.
            </summary>
            <param name="level">The level to get combo offsets for.</param>
            <returns>An integer representing a data offset.</returns>
        </member>
        <member name="P:Editroid.Combo.Item(System.Int32)">
            <summary>
            Gets the index of a specified tile (0 through 3), performing saftey checks to make
            sure that the index is within range.
            </summary>
            <param name="i">tile index</param>
            <returns>index of graphic to use for a specific tile</returns>
        </member>
        <member name="P:Editroid.Combo.BrinstarComboOffset">
            <summary>
            The offset of combo data
            </summary>
        </member>
        <member name="P:Editroid.Combo.NorfairComboOffset">
            <summary>
            The offset of combo data
            </summary>
        </member>
        <member name="P:Editroid.Combo.KraidComboOffset">
            <summary>
            The offset of combo data
            </summary>
        </member>
        <member name="P:Editroid.Combo.RidleyComboOffset">
            <summary>
            The offset of combo data
            </summary>
        </member>
        <member name="P:Editroid.Combo.TourainComboOffset">
            <summary>
            The offset of combo data
            </summary>
        </member>
        <member name="T:Editroid.Graphic.ScreenDisplay">
            <summary>
            Renders a Metroid screen.
            </summary>
        </member>
        <member name="M:Editroid.Graphic.ScreenDisplay.Clear">
            <summary>
            Clears the screen and sprite data.
            </summary>
        </member>
        <member name="M:Editroid.Graphic.ScreenDisplay.DrawObject(Editroid.ScreenObject)">
            <summary>
            Draws an object to this screen display.
            </summary>
            <param name="obj">An instance of a combo. Palette and position information
            is specified in the ScreenObject.</param>
        </member>
        <member name="M:Editroid.Graphic.ScreenDisplay.GetPhysics(System.Byte)">
            <summary>
            Gets the physics of a tile.
            </summary>
            <param name="tile">The index of a tile.</param>
            <returns>A Physics value for the physics of a tile.</returns>
        </member>
        <member name="M:Editroid.Graphic.ScreenDisplay.AddSprite(Editroid.Graphic.Sprite,System.Int32,System.Int32,System.Byte)">
            <summary>
            Adds a sprite to a batch to be rendered to the output image.
            </summary>
            <param name="sprite">The graphic sprite.</param>
            <param name="X">The location of the sprite.</param>
            <param name="Y">The location of the sprite.</param>
            <param name="palette">The index of the palette to render with.</param>
        </member>
        <member name="M:Editroid.Graphic.ScreenDisplay.DrawObjectSelected(Editroid.ScreenObject)">
            <summary>
            Draws an object to this screen display using the fourth palette table
            after the specified palette table to indicate that this object is selected
            </summary>
            <param name="obj">An instance of a combo. Palette and position information
            is specified in the ScreenObject.</param>
        </member>
        <member name="M:Editroid.Graphic.ScreenDisplay.DrawScreen(System.Int32,System.Int32)">
            <summary>
            Constructs the screen data in memory.
            </summary>
            <param name="index">The index of the screen to draw.</param>
            <param name="SelectedObject">The object that is currently selected.</param>
            <remarks>This function does not render the screen. It prepares the 
            data necessary to render the screen.</remarks>
        </member>
        <member name="M:Editroid.Graphic.ScreenDisplay.DrawScreen(System.Int32,Editroid.ScreenObject)">
            <summary>
            Constructs the screen data in memory.
            </summary>
            <param name="index">The index of the screen to draw.</param>
            <param name="SelectedObject">The object that is currently selected.</param>
            <remarks>This function does not render the screen. It prepares the 
            data necessary to render the screen.</remarks>
        </member>
        <member name="M:Editroid.Graphic.ScreenDisplay.DrawScreen(System.Int32)">
            <summary>
            Constructs the screen data in memory.
            </summary>
            <param name="index">The index of the screen to draw.</param>
            <remarks>This function does not render the screen. It prepares the 
            data necessary to render the screen.</remarks>
        </member>
        <member name="M:Editroid.Graphic.ScreenDisplay.Render(System.Drawing.Graphics)">
            <summary>
            Renders a screen using GDI+.
            </summary>
            <param name="g">GDI+ graphic destination.</param>
            <remarks>This overload performs very poorly due to GDI+'s very poor
            optimizations for paletted bitmaps. This overload also does not render
            sprites in the screen, mainly because of the palette limitations of GDI+.</remarks>
        </member>
        <member name="M:Editroid.Graphic.ScreenDisplay.Render(Editroid.Graphic.Blitter,System.Drawing.Bitmap)">
            <summary>
            Renders the screen in memory with no sprites or doors.
            </summary>
            <param name="b">The Blitter object used for rendering.</param>
            <param name="dest">The bitmap to render to.</param>
        </member>
        <member name="M:Editroid.Graphic.ScreenDisplay.ApplyPalette(System.Drawing.Bitmap,System.Boolean)">
            <summary>
            Applies the current level's (specified by the Level property) palette
            to a Bitmap, generally the Bitmap that is being rendered to.
            </summary>
            <param name="dest">The indexed bitmap to apply a color table to.</param>
            <param name="alt">If true, the level's alternate background palette will be used instead of the normal palette.</param>
        </member>
        <member name="M:Editroid.Graphic.ScreenDisplay.Render(Editroid.Graphic.Blitter,System.Drawing.Bitmap,Editroid.ScreenEnemy[],Editroid.ScreenDoor[],System.Boolean)">
            <summary>
            Renders the screen in memory, additionally rendering any doors and sprites specified.
            </summary>
            <param name="b">The Blitter object used for rendering.</param>
            <param name="dest">The bitmap to render to.</param>
            <param name="sprites">An array of sprites to be rendered, or null if there are no sprites.</param>
            <param name="doors">An array of doors to render, or null if there are no doors.</param>
            <param name="showPhysics">If true then the screen will be drawn such that the phyics of the tiles are appearent. Sprites, doors, items, and the selection will be omitted.</param>
        </member>
        <member name="P:Editroid.Graphic.ScreenDisplay.Level">
            <summary>
            Gets/sets which level to obtain screen data from.
            </summary>
        </member>
        <member name="P:Editroid.Graphic.ScreenDisplay.GameItem">
            <summary>
            Get/set an item to be drawn when the screen is rendered.
            </summary>
        </member>
        <member name="P:Editroid.Graphic.ScreenDisplay.DefaultPalette">
            <summary>
            Get/set the default palette.
            </summary>
        </member>
        <member name="P:Editroid.Graphic.ScreenDisplay.SelectedEnemy">
            <summary>
            Gets or sets the index of the selected enemy.
            </summary>
        </member>
        <member name="T:Editroid.Levels">
            <summary>
            Represents the levels of Metroid
            </summary>
        </member>
        <member name="F:Editroid.Levels.Brinstar">
            <summary>
            Brinstar
            </summary>
        </member>
        <member name="F:Editroid.Levels.Norfair">
            <summary>
            Norfair
            </summary>
        </member>
        <member name="F:Editroid.Levels.Tourain">
            <summary>
            Tourain
            </summary>
        </member>
        <member name="F:Editroid.Levels.Kraid">
            <summary>
            Kraid
            </summary>
        </member>
        <member name="F:Editroid.Levels.Ridley">
            <summary>
            Ridley
            </summary>
        </member>
        <member name="F:Editroid.Levels.Invalid">
            <summary>
            Specifies an invalid value. Should never be passed as a parameter or property.
            </summary>
        </member>
        <member name="T:Editroid.Level">
            <summary>
            This class encapsulates level specific data.
            </summary>
            <remarks>This class stores some data locally. Certain changes will not necessarily be reflected in the ROM.</remarks>
        </member>
        <member name="M:Editroid.Level.CropScreenData(Editroid.Screen,System.Int32,System.Int32)">
            <summary>
            Removes data from a screen entry and compacts screen data. No safety checks are performed.
            </summary>
            <param name="screen">The screen to remove data from</param>
            <param name="DataOffset">The offset of the data to remove.</param>
            <param name="DataSize">The number of bytes to remove.</param>
        </member>
        <member name="M:Editroid.Level.ExpandScreenData(Editroid.Screen,System.Int32,System.Int32)">
            <summary>
            Expands the screen data black and inserts data into a screen entry. No safety checks are performed. New memory is not initialized.
            </summary>
            <param name="screen">The screen to insert data into.</param>
            <param name="DataOffset">The offset to add data at.</param>
            <param name="DataSize">The number of bytes to add.</param>
        </member>
        <member name="M:Editroid.Level.#ctor(Editroid.Rom,Editroid.Levels)">
            <summary>
            Loads all level-specific data for a specific level in a given ROM image
            </summary>
            <param name="rom">The Rom object to load data from</param>
            <param name="level">The level to load</param>
        </member>
        <member name="M:Editroid.Level.GetSprite(System.Int32)">
            <summary>
            Gets a sprite by index.
            </summary>
            <param name="index">Index of the sprite to get.</param>
            <returns>A Graphic.Sprite object.</returns>
        </member>
        <member name="M:Editroid.Level.LoadPatterns">
            <summary>
            Gets a linear pattern table that can be used for blitting to construct images using level-specific graphics. The table is 1 graphic tile tall and 256 tiles wide.
            </summary>
        </member>
        <member name="M:Editroid.Level.GetStruct(System.Int32)">
            <summary>
            Gets a struct definition.
            </summary>
            <param name="index">Index of a struct.</param>
            <returns>A struct definition.</returns>
        </member>
        <member name="M:Editroid.Level.GetCombo(System.Int32)">
            <summary>
            Gets a combo in this level by index.
            </summary>
            <param name="index">Index of the combo.</param>
            <returns>A Combo object.</returns>
        </member>
        <member name="M:Editroid.Level.GetScreen(System.Int32)">
            <summary>
            Gets screen specific data.
            </summary>
            <param name="index">The index of a screen.</param>
            <returns>Screen specific data</returns>
        </member>
        <member name="P:Editroid.Level.LevelIdentifier">
            <summary>Gets a Levels enumeration value for this level.</summary>
        </member>
        <member name="P:Editroid.Level.BgPalette">
            <summary>Gets a NesPalette object representing the background 
            palette for this level.</summary>
        </member>
        <member name="P:Editroid.Level.BgAltPalette">
            <summary>Gets a NesPalette object representing the alternate background 
            palette for this level.</summary>
        </member>
        <member name="P:Editroid.Level.SpritePalette">
            <summary>Gets a NesPalette object representing the sprite
            palette for this level.</summary>
        </member>
        <member name="P:Editroid.Level.Combos">
            <summary>
            Gets the combos for this level.
            </summary>
        </member>
        <member name="P:Editroid.Level.LevelStartOffset">
            <summary>
            Gets the offset of the level start screen.
            </summary>
        </member>
        <member name="P:Editroid.Level.StartScreenX">
            <summary>
            Gets/sets the location where the player will start in this level if he dies/continues.
            </summary>
        </member>
        <member name="P:Editroid.Level.StartScreenY">
            <summary>
            Gets/sets the location where the player will start in this level if he dies/continues.
            </summary>
        </member>
        <member name="P:Editroid.Level.StructDataOffset">
            <summary>
            Gets the offset of structure data.
            </summary>
        </member>
        <member name="P:Editroid.Level.FreeRoomData">
            <summary>
            Gets the remaining free space for room data for this level, assuming there is no data between
            room data and structure data.
            </summary>
        </member>
        <member name="P:Editroid.Level.ItemTable">
            <summary>
            Gets the item table for this level.
            </summary>
        </member>
        <member name="P:Editroid.Level.SpriteCount">
            <summary>
            Gets the number of sprites in this level.
            </summary>
        </member>
        <member name="P:Editroid.Level.Patterns">
            <summary>
            Gets the pattern table for this level.
            </summary>
        </member>
        <member name="P:Editroid.Level.SpritePatterns">
            <summary>
            Gets the sprite pattern table for this level.
            </summary>
        </member>
        <member name="P:Editroid.Level.StructCount">
            <summary>
            Gets the number of structs in this level.
            </summary>
        </member>
        <member name="P:Editroid.Level.ScreenCount">
            <summary>
            Gets the number of screens in this level.
            </summary>
        </member>
        <member name="T:Editroid.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Editroid.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Editroid.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Editroid.Properties.Resources.tos">
             <summary>
               Looks up a localized string similar to {\rtf1\ansi\ansicpg1252\deff0\deflang1033{\fonttbl{\f0\fswiss\fprq2\fcharset0 Trebuchet MS;}{\f1\fswiss\fprq2\fcharset0 Arial;}{\f2\fnil\fcharset2 Symbol;}}
            {\colortbl ;\red0\green128\blue0;}
            {\*\generator Msftedit 5.41.15.1515;}\viewkind4\uc1\pard\cf1\b\f0\fs44 e\fs20 ditroid 1.2\cf0\b0\par
            2008 iLab\par
            ilab.editroid@gmail.com\par
            \par
            The software is provided as-is. The author of this software makes no guaruntee or warranty that it will behave as intended or desired, or that it will not damage hard [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="F:Editroid.frmMapArea.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Editroid.frmMapArea.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Editroid.frmMapArea.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:Editroid.frmMapArea.MapControl">
            <summary>
            Gets or sets the MapControl object that holds map data. The image from this control will be used also.
            </summary>
        </member>
        <member name="P:Editroid.frmMapArea.MapSelection">
            <summary>
            Gets a rectangle representing the selected area of the map.
            </summary>
        </member>
        <member name="P:Editroid.frmMapArea.LevelFilter">
            <summary>
            Gets a value indicating the selected level filter.
            </summary>
        </member>
        <member name="P:Editroid.frmMapArea.DrawScale">
            <summary>
            Returns the selected map scale (int the form of its reciprocal: 4 equals one quarter, 2 equals one half).
            </summary>
        </member>
        <member name="M:Editroid.ItemEntryEditor.VerifyItemPosition(Editroid.ItemDatEditor,System.Int32@)">
            <summary>
            Ensures that the target position of an ItemDatEditor is valid.
            </summary>
            <param name="item">The itemDatEditor to check the target position of.</param>
            <param name="destX">The target to be checked, and, if needed, modified.</param>
        </member>
        <member name="M:Editroid.ItemDatEditor.ComparePosition(Editroid.ItemDatEditor)">
            <summary>
            Compares the position of items.
            </summary>
            <param name="d">The item to compare to.</param>
            <returns>A negative value if the compared item comes before this item, a positive value if it comes after, or zero if they are at the same position.</returns>
        </member>
        <member name="M:Editroid.ItemDatEditor.ResetLeft">
            <summary>
            Resets the position of this control based on the parent's position.
            </summary>
        </member>
        <member name="T:Editroid.MetroidPointer">
            <summary>
            Represents a metroid pointer.
            </summary>
            <remarks>Metroid pointers are often relative, particularly level-specific data.
            Use the GetDataOffset method to obtain the correctly offset pointer value.</remarks>
        </member>
        <member name="M:Editroid.MetroidPointer.#ctor(System.UInt16)">
            <summary>
            Creates a pointer from a composite value
            </summary>
            <param name="value">An unsigned 16-bit composite of two bytes making up a pointer</param>
        </member>
        <member name="M:Editroid.MetroidPointer.#ctor(System.Int16)">
            <summary>
            Creates a pointer from a composite value
            </summary>
            <param name="value">A 16-bit composite of two bytes making up a pointer</param>
        </member>
        <member name="M:Editroid.MetroidPointer.#ctor(System.Byte,System.Byte)">
            <summary>
            Creates a pointer from two bytes
            </summary>
            <param name="byte1">First byte of this Pointer</param>
            <param name="byte2">Second byte of this Pointer</param>
        </member>
        <member name="M:Editroid.MetroidPointer.#ctor(System.Byte[],System.Int32)">
            <summary>
            Loads a pointer from raw data
            </summary>
            <param name="source">Source of the data</param>
            <param name="offset">The offset of the pointer</param>
        </member>
        <member name="M:Editroid.MetroidPointer.GetDataOffset(Editroid.Levels)">
            <summary>
            Gets the offset of the level-specific data that this pointer
            refers to.
            </summary>
            <param name="level">The level this pointer refers to</param>
            <returns>the offset of the level-specific data that this pointer
            refers to</returns>
            <remarks>This function only applies to certain level-specific data.</remarks>
        </member>
        <member name="M:Editroid.MetroidPointer.SetDataOffset(Editroid.Levels,System.Int32)">
            <summary>
            Calculates and stores the correct pointer value to point to 
            level-specific data
            </summary>
            <param name="level">The level this pointer refers to</param>
            <param name="offset">The offset of the actual data in the ROM</param>
        </member>
        <member name="M:Editroid.MetroidPointer.GetLevelOffset(Editroid.Levels)">
            <summary>
            Gets the pointer offset correction for a specified level.
            This value does not account for different memory banks.
            </summary>
            <param name="level">The level to get the correction value for</param>
            <returns>The pointer offset correction</returns>
        </member>
        <member name="P:Editroid.MetroidPointer.RealValue">
            <summary>
            Gets the actual value represented by this pointer.
            </summary>
            <remarks>This is not necessarily the offset of the 
            data that the pointer is intended to refer to. If the data is
            level-specific, use the GetDataOffset function. This corrects
            offsets not reflected in the raw pointer value.</remarks>
        </member>
        <member name="P:Editroid.MetroidPointer.BrinstarOffset">
            <summary>
            Pointer offset correction for Brinstar. This value does not account for different memory banks.
            </summary>
        </member>
        <member name="P:Editroid.MetroidPointer.RidleyOffset">
            <summary>
            Pointer offset correction for Ridley's Hideout. This value does not account for different memory banks.
            </summary>
        </member>
        <member name="P:Editroid.MetroidPointer.KraidOffset">
            <summary>
            Pointer offset correction for Kraid's Hideout. This value does not account for different memory banks.
            </summary>
        </member>
        <member name="P:Editroid.MetroidPointer.NorfairOffset">
            <summary>
            Pointer offset correction for Norfair. This value does not account for different memory banks.
            </summary>
        </member>
        <member name="P:Editroid.MetroidPointer.TourainOffset">
            <summary>
            Pointer offset correction for Tourain. This value does not account for different memory banks.
            </summary>
        </member>
        <member name="T:Editroid.MetroidHandle">
            <summary>
            Handle points to a ROM offset that contains a pointer to ROM data, allowing access to the data and modification of the pointer.
            </summary>
        </member>
        <member name="M:Editroid.MetroidHandle.#ctor(System.Byte[],System.Int32)">
            <summary>Instantiates this object.</summary>
            <param name="offset">Location of pointer in ROM data.</param>
            <param name="data">Rom image this pointer points to.</param>
        </member>
        <member name="M:Editroid.MetroidHandle.#ctor(System.Byte[],System.Int32,Editroid.Levels)">
            <summary>Instantiates this object.</summary>
            <param name="data">ROM data.</param>
            <param name="offset">Location of pointer in ROM data.</param>
            <param name="level">The level that the pointer refers to data for.</param>
        </member>
        <member name="M:Editroid.MetroidHandle.OffsetPointer(System.Int32)">
            <summary>
            Modifies the underlying pointer, allowing pointer arithmetic to be performed.
            </summary>
            <param name="amount">The amount to offset the pointer.</param>
        </member>
        <member name="P:Editroid.MetroidHandle.Level">
            <summary>
            Gets/sets which level this handle references data for.
            </summary>
        </member>
        <member name="P:Editroid.MetroidHandle.HandleOffset">
            <summary>Gets the location in the rom where the actual pointer is stored.</summary>
        </member>
        <member name="P:Editroid.MetroidHandle.PointerValue">
            <summary>Gets the uncorrected value of thie pointer this handle references.</summary>
        </member>
        <member name="P:Editroid.MetroidHandle.PointerTarget">
            <summary>Gets the ROM offset for the data that this handle's pointer references.</summary>
        </member>
        <member name="P:Editroid.MetroidHandle.Pointer">
            <summary>
            Gets the metroid pointer that this handle references.
            </summary>
        </member>
        <member name="T:Editroid.Union_16">
            <summary>
            Allows direct access to the same memory as different data types.
            </summary>
            <remarks>Editing one member of this struct will modify the value of some
            or all other members of this struct. All members share the same memory.</remarks>
        </member>
        <member name="F:Editroid.Union_16.Byte1">
            <summary>The first byte of the 16 bits.</summary>
        </member>
        <member name="F:Editroid.Union_16.Byte2">
            <summary>The second byte of the 16 bits.</summary>
        </member>
        <member name="F:Editroid.Union_16.UShort">
            <summary>The value of the 16 bits as an unsigned integer.</summary>
        </member>
        <member name="F:Editroid.Union_16.Short">
            <summary>The value of the 16 bits as a signed integer.</summary>
        </member>
        <member name="F:Editroid.Union_16.Char">
            <summary>The value of the 16 bits as a unicode character.</summary>
        </member>
        <member name="M:Editroid.Union_16.Create">
            <summary>Gets an initialized instance of this struct.</summary>
            <returns>An initialized instance of this struct.</returns>
        </member>
    </members>
</doc>
